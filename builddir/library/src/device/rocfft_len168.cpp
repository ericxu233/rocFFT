/*
 * Stockham kernels generated by:
 * 
 *     /home/ugrad/ugrad003/roctosycl/rocFFT/library/src/device/kernel-generator.py --pattern=all --precision=all --groups=150 --manual-small= --manual-large= generate /home/ugrad/ugrad003/roctosycl/rocFFT/builddir/library/src/device/generator/rocfft-kernel-generator
 * 
 * Generator is: /home/ugrad/ugrad003/roctosycl/rocFFT/library/src/device/kernel-generator.py
 * Kernel is: namespace(factors=[8, 7, 3], flavour='uwide', length=168, scheme='CS_KERNEL_STOCKHAM', threads_per_block=256)
 */

#include "kernel_launch.h"
#include "real2complex.h"
#include "rocfft_butterfly_template.h"
#include <hip/hip_runtime.h>

/* stockham.py:765 */
template <typename scalar_type, StrideBin sb>
__device__ void ip_forward_length168_SBRR_device(scalar_type* __restrict__ lds,
                                                 const scalar_type* __restrict__ twiddles,
                                                 size_t       stride_lds,
                                                 unsigned int offset_lds,
                                                 bool         write)
{
    size_t       thread;
    scalar_type  R[8];
    scalar_type  W;
    scalar_type  t;
    const size_t lstride = (sb == SB_UNIT) ? (1) : (stride_lds);
    thread               = threadIdx.x % 56; /* stockham.py:731 */

    // pass 0
    __syncthreads();
    R[0] = lds[offset_lds + (thread + 0) * lstride]; /* stockham.py:542 */
    R[1] = lds[offset_lds + (thread + 21) * lstride]; /* stockham.py:542 */
    R[2] = lds[offset_lds + (thread + 42) * lstride]; /* stockham.py:542 */
    R[3] = lds[offset_lds + (thread + 63) * lstride]; /* stockham.py:542 */
    R[4] = lds[offset_lds + (thread + 84) * lstride]; /* stockham.py:542 */
    R[5] = lds[offset_lds + (thread + 105) * lstride]; /* stockham.py:542 */
    R[6] = lds[offset_lds + (thread + 126) * lstride]; /* stockham.py:542 */
    R[7] = lds[offset_lds + (thread + 147) * lstride]; /* stockham.py:542 */

    FwdRad8B1(&R[0], &R[1], &R[2], &R[3], &R[4], &R[5], &R[6], &R[7]); /* stockham.py:566 */

    __syncthreads();
    if(write && thread < 21)
    {
        lds[offset_lds + ((thread / 1) * 8 + thread % 1 + 0) * lstride]
            = R[0]; /* stockham.py:577 */
        lds[offset_lds + ((thread / 1) * 8 + thread % 1 + 1) * lstride]
            = R[1]; /* stockham.py:577 */
        lds[offset_lds + ((thread / 1) * 8 + thread % 1 + 2) * lstride]
            = R[2]; /* stockham.py:577 */
        lds[offset_lds + ((thread / 1) * 8 + thread % 1 + 3) * lstride]
            = R[3]; /* stockham.py:577 */
        lds[offset_lds + ((thread / 1) * 8 + thread % 1 + 4) * lstride]
            = R[4]; /* stockham.py:577 */
        lds[offset_lds + ((thread / 1) * 8 + thread % 1 + 5) * lstride]
            = R[5]; /* stockham.py:577 */
        lds[offset_lds + ((thread / 1) * 8 + thread % 1 + 6) * lstride]
            = R[6]; /* stockham.py:577 */
        lds[offset_lds + ((thread / 1) * 8 + thread % 1 + 7) * lstride]
            = R[7]; /* stockham.py:577 */
    }

    // pass 1
    __syncthreads();
    R[0] = lds[offset_lds + (thread + 0) * lstride]; /* stockham.py:542 */
    R[1] = lds[offset_lds + (thread + 24) * lstride]; /* stockham.py:542 */
    R[2] = lds[offset_lds + (thread + 48) * lstride]; /* stockham.py:542 */
    R[3] = lds[offset_lds + (thread + 72) * lstride]; /* stockham.py:542 */
    R[4] = lds[offset_lds + (thread + 96) * lstride]; /* stockham.py:542 */
    R[5] = lds[offset_lds + (thread + 120) * lstride]; /* stockham.py:542 */
    R[6] = lds[offset_lds + (thread + 144) * lstride]; /* stockham.py:542 */

    W    = twiddles[7 + 6 * (thread % 8)]; /* stockham.py:554 */
    t.x  = W.x * R[1].x - W.y * R[1].y; /* stockham.py:555 */
    t.y  = W.y * R[1].x + W.x * R[1].y; /* stockham.py:556 */
    R[1] = t; /* stockham.py:557 */
    W    = twiddles[8 + 6 * (thread % 8)]; /* stockham.py:554 */
    t.x  = W.x * R[2].x - W.y * R[2].y; /* stockham.py:555 */
    t.y  = W.y * R[2].x + W.x * R[2].y; /* stockham.py:556 */
    R[2] = t; /* stockham.py:557 */
    W    = twiddles[9 + 6 * (thread % 8)]; /* stockham.py:554 */
    t.x  = W.x * R[3].x - W.y * R[3].y; /* stockham.py:555 */
    t.y  = W.y * R[3].x + W.x * R[3].y; /* stockham.py:556 */
    R[3] = t; /* stockham.py:557 */
    W    = twiddles[10 + 6 * (thread % 8)]; /* stockham.py:554 */
    t.x  = W.x * R[4].x - W.y * R[4].y; /* stockham.py:555 */
    t.y  = W.y * R[4].x + W.x * R[4].y; /* stockham.py:556 */
    R[4] = t; /* stockham.py:557 */
    W    = twiddles[11 + 6 * (thread % 8)]; /* stockham.py:554 */
    t.x  = W.x * R[5].x - W.y * R[5].y; /* stockham.py:555 */
    t.y  = W.y * R[5].x + W.x * R[5].y; /* stockham.py:556 */
    R[5] = t; /* stockham.py:557 */
    W    = twiddles[12 + 6 * (thread % 8)]; /* stockham.py:554 */
    t.x  = W.x * R[6].x - W.y * R[6].y; /* stockham.py:555 */
    t.y  = W.y * R[6].x + W.x * R[6].y; /* stockham.py:556 */
    R[6] = t; /* stockham.py:557 */

    FwdRad7B1(&R[0], &R[1], &R[2], &R[3], &R[4], &R[5], &R[6]); /* stockham.py:566 */

    __syncthreads();
    if(write && thread < 24)
    {
        lds[offset_lds + ((thread / 8) * 56 + thread % 8 + 0) * lstride]
            = R[0]; /* stockham.py:577 */
        lds[offset_lds + ((thread / 8) * 56 + thread % 8 + 8) * lstride]
            = R[1]; /* stockham.py:577 */
        lds[offset_lds + ((thread / 8) * 56 + thread % 8 + 16) * lstride]
            = R[2]; /* stockham.py:577 */
        lds[offset_lds + ((thread / 8) * 56 + thread % 8 + 24) * lstride]
            = R[3]; /* stockham.py:577 */
        lds[offset_lds + ((thread / 8) * 56 + thread % 8 + 32) * lstride]
            = R[4]; /* stockham.py:577 */
        lds[offset_lds + ((thread / 8) * 56 + thread % 8 + 40) * lstride]
            = R[5]; /* stockham.py:577 */
        lds[offset_lds + ((thread / 8) * 56 + thread % 8 + 48) * lstride]
            = R[6]; /* stockham.py:577 */
    }

    // pass 2
    __syncthreads();
    R[0] = lds[offset_lds + (thread + 0) * lstride]; /* stockham.py:542 */
    R[1] = lds[offset_lds + (thread + 56) * lstride]; /* stockham.py:542 */
    R[2] = lds[offset_lds + (thread + 112) * lstride]; /* stockham.py:542 */

    W    = twiddles[55 + 2 * (thread % 56)]; /* stockham.py:554 */
    t.x  = W.x * R[1].x - W.y * R[1].y; /* stockham.py:555 */
    t.y  = W.y * R[1].x + W.x * R[1].y; /* stockham.py:556 */
    R[1] = t; /* stockham.py:557 */
    W    = twiddles[56 + 2 * (thread % 56)]; /* stockham.py:554 */
    t.x  = W.x * R[2].x - W.y * R[2].y; /* stockham.py:555 */
    t.y  = W.y * R[2].x + W.x * R[2].y; /* stockham.py:556 */
    R[2] = t; /* stockham.py:557 */

    FwdRad3B1(&R[0], &R[1], &R[2]); /* stockham.py:566 */

    __syncthreads();
    if(write)
    {
        lds[offset_lds + ((thread / 56) * 168 + thread % 56 + 0) * lstride]
            = R[0]; /* stockham.py:577 */
        lds[offset_lds + ((thread / 56) * 168 + thread % 56 + 56) * lstride]
            = R[1]; /* stockham.py:577 */
        lds[offset_lds + ((thread / 56) * 168 + thread % 56 + 112) * lstride]
            = R[2]; /* stockham.py:577 */
    }
}
/* stockham.py:709 */
template <typename scalar_type, StrideBin sb, EmbeddedType ebtype, CallbackType cbtype>
__global__
    __launch_bounds__(224) void ip_forward_length168_SBRR(const scalar_type* __restrict__ twiddles,
                                                          const size_t dim,
                                                          const size_t* __restrict__ lengths,
                                                          const size_t* __restrict__ stride,
                                                          const size_t       nbatch,
                                                          const unsigned int lds_padding,
                                                          void* __restrict__ load_cb_fn,
                                                          void* __restrict__ load_cb_data,
                                                          uint32_t load_cb_lds_bytes,
                                                          void* __restrict__ store_cb_fn,
                                                          void* __restrict__ store_cb_data,
                                                          scalar_type* __restrict__ buf)
{
    // this kernel:
    //   uses 56 threads per transform
    //   does 4 transforms per thread block
    // therefore it should be called with 224 threads per thread block
    extern __shared__ unsigned char __align__(sizeof(scalar_type)) lds_uchar[];
    scalar_type* __restrict__ lds = reinterpret_cast<scalar_type*>(lds_uchar);
    size_t       offset           = 0;
    unsigned int offset_lds;
    size_t       stride_lds;
    size_t       batch;
    size_t       transform;
    size_t       thread;
    bool         write;
    const size_t stride0  = (sb == SB_UNIT) ? (1) : (stride[0]);
    auto         load_cb  = get_load_cb<scalar_type, cbtype>(load_cb_fn);
    auto         store_cb = get_store_cb<scalar_type, cbtype>(store_cb_fn);

    // large twiddles

    // offsets
    size_t remaining;
    size_t plength = 1;
    size_t index_along_d;
    transform = blockIdx.x * 4 + threadIdx.x / 56; /* stockham.py:363 */
    remaining = transform; /* stockham.py:364 */
    for(int d = 1; d < dim; ++d)
    {
        plength       = plength * lengths[d]; /* stockham.py:367 */
        index_along_d = remaining % lengths[d]; /* stockham.py:368 */
        remaining     = remaining / lengths[d]; /* stockham.py:369 */
        offset        = offset + index_along_d * stride[d]; /* stockham.py:370 */
    }
    batch      = transform / plength; /* stockham.py:371 */
    offset     = offset + batch * stride[dim]; /* stockham.py:372 */
    offset_lds = (168 + lds_padding) * (transform % 4); /* stockham.py:373 */

    if(batch >= nbatch)
    {
        return;
    }

    // load global
    thread = threadIdx.x % 56; /* stockham.py:384 */
    lds[offset_lds + thread + 0]
        = load_cb(buf, offset + (thread + 0) * stride0, load_cb_data, nullptr);
    ; /* stockham.py:387 */
    lds[offset_lds + thread + 56]
        = load_cb(buf, offset + (thread + 56) * stride0, load_cb_data, nullptr);
    ; /* stockham.py:387 */
    lds[offset_lds + thread + 112]
        = load_cb(buf, offset + (thread + 112) * stride0, load_cb_data, nullptr);
    ; /* stockham.py:387 */

    // append extra global loading for C2Real pre-process only
    if(ebtype == EmbeddedType::C2Real_PRE)
    {
        // use the last thread of each transform to load one more element per row
        if(thread == 55)
        {
            lds[offset_lds + thread + 112 + 1]
                = load_cb(buf, offset + (thread + 112 + 1) * stride0, load_cb_data, nullptr);
            ; /* stockham.py:395 */
        }
    }

    // handle even-length real to complex pre-process in lds before transform
    if(ebtype == EmbeddedType::C2Real_PRE)
    {
        __syncthreads();

        real_pre_process_kernel_inplace<scalar_type, true>(thread % 84 + 0,
                                                           168 - thread % 84 - 0,
                                                           84,
                                                           &lds[offset_lds],
                                                           0,
                                                           &twiddles[168]); /* stockham.py:338 */

        real_pre_process_kernel_inplace<scalar_type, true>(thread % 84 + 56,
                                                           168 - thread % 84 - 56,
                                                           84,
                                                           &lds[offset_lds],
                                                           0,
                                                           &twiddles[168]); /* stockham.py:338 */

        __syncthreads();
    }

    // transform
    write = true; /* stockham.py:681 */
    ip_forward_length168_SBRR_device<scalar_type, SB_UNIT>(
        lds, twiddles, stride_lds, offset_lds, write); /* stockham.py:686 */

    // handle even-length complex to real post-process in lds after transform
    if(ebtype == EmbeddedType::Real2C_POST)
    {
        __syncthreads();

        real_post_process_kernel_inplace<scalar_type, true>(thread % 84 + 0,
                                                            168 - thread % 84 - 0,
                                                            84,
                                                            &lds[offset_lds],
                                                            0,
                                                            &twiddles[168]); /* stockham.py:338 */

        real_post_process_kernel_inplace<scalar_type, true>(thread % 84 + 56,
                                                            168 - thread % 84 - 56,
                                                            84,
                                                            &lds[offset_lds],
                                                            0,
                                                            &twiddles[168]); /* stockham.py:338 */
    }

    // store global
    __syncthreads();
    store_cb(
        buf, offset + (thread + 0) * stride0, lds[offset_lds + thread + 0], store_cb_data, nullptr);
    store_cb(buf,
             offset + (thread + 56) * stride0,
             lds[offset_lds + thread + 56],
             store_cb_data,
             nullptr);
    store_cb(buf,
             offset + (thread + 112) * stride0,
             lds[offset_lds + thread + 112],
             store_cb_data,
             nullptr);

    // append extra global write for Real2C post-process only
    if(ebtype == EmbeddedType::Real2C_POST)
    {
        // use the last thread of each transform to write one more element per row
        if(thread == 55)
        {
            store_cb(buf,
                     offset + (thread + 112 + 1) * stride0,
                     lds[offset_lds + thread + 112 + 1],
                     store_cb_data,
                     nullptr);
        }
    }
}
/* stockham.py:709 */
template <typename scalar_type, StrideBin sb, EmbeddedType ebtype, CallbackType cbtype>
__global__ __launch_bounds__(224) void ip_forward_length168_SBRR(
    const scalar_type* __restrict__ twiddles,
    const size_t dim,
    const size_t* __restrict__ lengths,
    const size_t* __restrict__ stride,
    const size_t       nbatch,
    const unsigned int lds_padding,
    void* __restrict__ load_cb_fn,
    void* __restrict__ load_cb_data,
    uint32_t load_cb_lds_bytes,
    void* __restrict__ store_cb_fn,
    void* __restrict__ store_cb_data,
    real_type_t<scalar_type>* __restrict__ bufre,
    real_type_t<scalar_type>* __restrict__ bufim)
{
    // this kernel:
    //   uses 56 threads per transform
    //   does 4 transforms per thread block
    // therefore it should be called with 224 threads per thread block
    extern __shared__ unsigned char __align__(sizeof(scalar_type)) lds_uchar[];
    scalar_type* __restrict__ lds = reinterpret_cast<scalar_type*>(lds_uchar);
    size_t       offset           = 0;
    unsigned int offset_lds;
    size_t       stride_lds;
    size_t       batch;
    size_t       transform;
    size_t       thread;
    bool         write;
    const size_t stride0  = (sb == SB_UNIT) ? (1) : (stride[0]);
    auto         load_cb  = get_load_cb<scalar_type, cbtype>(load_cb_fn);
    auto         store_cb = get_store_cb<scalar_type, cbtype>(store_cb_fn);

    // large twiddles

    // offsets
    size_t remaining;
    size_t plength = 1;
    size_t index_along_d;
    transform = blockIdx.x * 4 + threadIdx.x / 56; /* stockham.py:363 */
    remaining = transform; /* stockham.py:364 */
    for(int d = 1; d < dim; ++d)
    {
        plength       = plength * lengths[d]; /* stockham.py:367 */
        index_along_d = remaining % lengths[d]; /* stockham.py:368 */
        remaining     = remaining / lengths[d]; /* stockham.py:369 */
        offset        = offset + index_along_d * stride[d]; /* stockham.py:370 */
    }
    batch      = transform / plength; /* stockham.py:371 */
    offset     = offset + batch * stride[dim]; /* stockham.py:372 */
    offset_lds = (168 + lds_padding) * (transform % 4); /* stockham.py:373 */

    if(batch >= nbatch)
    {
        return;
    }

    // load global
    thread                       = threadIdx.x % 56; /* stockham.py:384 */
    lds[offset_lds + thread + 0] = {bufre[offset + (thread + 0) * stride0],
                                    bufim[offset + (thread + 0) * stride0]}; /* generator.py:872 */
    lds[offset_lds + thread + 56]
        = {bufre[offset + (thread + 56) * stride0],
           bufim[offset + (thread + 56) * stride0]}; /* generator.py:872 */
    lds[offset_lds + thread + 112]
        = {bufre[offset + (thread + 112) * stride0],
           bufim[offset + (thread + 112) * stride0]}; /* generator.py:872 */

    // append extra global loading for C2Real pre-process only
    if(ebtype == EmbeddedType::C2Real_PRE)
    {
        // use the last thread of each transform to load one more element per row
        if(thread == 55)
        {
            lds[offset_lds + thread + 112 + 1]
                = {bufre[offset + (thread + 112 + 1) * stride0],
                   bufim[offset + (thread + 112 + 1) * stride0]}; /* generator.py:872 */
        }
    }

    // handle even-length real to complex pre-process in lds before transform
    if(ebtype == EmbeddedType::C2Real_PRE)
    {
        __syncthreads();

        real_pre_process_kernel_inplace<scalar_type, true>(thread % 84 + 0,
                                                           168 - thread % 84 - 0,
                                                           84,
                                                           &lds[offset_lds],
                                                           0,
                                                           &twiddles[168]); /* stockham.py:338 */

        real_pre_process_kernel_inplace<scalar_type, true>(thread % 84 + 56,
                                                           168 - thread % 84 - 56,
                                                           84,
                                                           &lds[offset_lds],
                                                           0,
                                                           &twiddles[168]); /* stockham.py:338 */

        __syncthreads();
    }

    // transform
    write = true; /* stockham.py:681 */
    ip_forward_length168_SBRR_device<scalar_type, SB_UNIT>(
        lds, twiddles, stride_lds, offset_lds, write); /* stockham.py:686 */

    // handle even-length complex to real post-process in lds after transform
    if(ebtype == EmbeddedType::Real2C_POST)
    {
        __syncthreads();

        real_post_process_kernel_inplace<scalar_type, true>(thread % 84 + 0,
                                                            168 - thread % 84 - 0,
                                                            84,
                                                            &lds[offset_lds],
                                                            0,
                                                            &twiddles[168]); /* stockham.py:338 */

        real_post_process_kernel_inplace<scalar_type, true>(thread % 84 + 56,
                                                            168 - thread % 84 - 56,
                                                            84,
                                                            &lds[offset_lds],
                                                            0,
                                                            &twiddles[168]); /* stockham.py:338 */
    }

    // store global
    __syncthreads();
    bufre[offset + (thread + 0) * stride0] = lds[offset_lds + thread + 0].x; /* generator.py:906 */
    bufim[offset + (thread + 0) * stride0] = lds[offset_lds + thread + 0].y; /* generator.py:908 */
    bufre[offset + (thread + 56) * stride0]
        = lds[offset_lds + thread + 56].x; /* generator.py:906 */
    bufim[offset + (thread + 56) * stride0]
        = lds[offset_lds + thread + 56].y; /* generator.py:908 */
    bufre[offset + (thread + 112) * stride0]
        = lds[offset_lds + thread + 112].x; /* generator.py:906 */
    bufim[offset + (thread + 112) * stride0]
        = lds[offset_lds + thread + 112].y; /* generator.py:908 */

    // append extra global write for Real2C post-process only
    if(ebtype == EmbeddedType::Real2C_POST)
    {
        // use the last thread of each transform to write one more element per row
        if(thread == 55)
        {
            bufre[offset + (thread + 112 + 1) * stride0]
                = lds[offset_lds + thread + 112 + 1].x; /* generator.py:906 */
            bufim[offset + (thread + 112 + 1) * stride0]
                = lds[offset_lds + thread + 112 + 1].y; /* generator.py:908 */
        }
    }
}
/* stockham.py:765 */
template <typename scalar_type, StrideBin sb>
__device__ void op_forward_length168_SBRR_device(scalar_type* __restrict__ lds,
                                                 const scalar_type* __restrict__ twiddles,
                                                 size_t       stride_lds,
                                                 unsigned int offset_lds,
                                                 bool         write)
{
    size_t       thread;
    scalar_type  R[8];
    scalar_type  W;
    scalar_type  t;
    const size_t lstride = (sb == SB_UNIT) ? (1) : (stride_lds);
    thread               = threadIdx.x % 56; /* stockham.py:731 */

    // pass 0
    __syncthreads();
    R[0] = lds[offset_lds + (thread + 0) * lstride]; /* stockham.py:542 */
    R[1] = lds[offset_lds + (thread + 21) * lstride]; /* stockham.py:542 */
    R[2] = lds[offset_lds + (thread + 42) * lstride]; /* stockham.py:542 */
    R[3] = lds[offset_lds + (thread + 63) * lstride]; /* stockham.py:542 */
    R[4] = lds[offset_lds + (thread + 84) * lstride]; /* stockham.py:542 */
    R[5] = lds[offset_lds + (thread + 105) * lstride]; /* stockham.py:542 */
    R[6] = lds[offset_lds + (thread + 126) * lstride]; /* stockham.py:542 */
    R[7] = lds[offset_lds + (thread + 147) * lstride]; /* stockham.py:542 */

    FwdRad8B1(&R[0], &R[1], &R[2], &R[3], &R[4], &R[5], &R[6], &R[7]); /* stockham.py:566 */

    __syncthreads();
    if(write && thread < 21)
    {
        lds[offset_lds + ((thread / 1) * 8 + thread % 1 + 0) * lstride]
            = R[0]; /* stockham.py:577 */
        lds[offset_lds + ((thread / 1) * 8 + thread % 1 + 1) * lstride]
            = R[1]; /* stockham.py:577 */
        lds[offset_lds + ((thread / 1) * 8 + thread % 1 + 2) * lstride]
            = R[2]; /* stockham.py:577 */
        lds[offset_lds + ((thread / 1) * 8 + thread % 1 + 3) * lstride]
            = R[3]; /* stockham.py:577 */
        lds[offset_lds + ((thread / 1) * 8 + thread % 1 + 4) * lstride]
            = R[4]; /* stockham.py:577 */
        lds[offset_lds + ((thread / 1) * 8 + thread % 1 + 5) * lstride]
            = R[5]; /* stockham.py:577 */
        lds[offset_lds + ((thread / 1) * 8 + thread % 1 + 6) * lstride]
            = R[6]; /* stockham.py:577 */
        lds[offset_lds + ((thread / 1) * 8 + thread % 1 + 7) * lstride]
            = R[7]; /* stockham.py:577 */
    }

    // pass 1
    __syncthreads();
    R[0] = lds[offset_lds + (thread + 0) * lstride]; /* stockham.py:542 */
    R[1] = lds[offset_lds + (thread + 24) * lstride]; /* stockham.py:542 */
    R[2] = lds[offset_lds + (thread + 48) * lstride]; /* stockham.py:542 */
    R[3] = lds[offset_lds + (thread + 72) * lstride]; /* stockham.py:542 */
    R[4] = lds[offset_lds + (thread + 96) * lstride]; /* stockham.py:542 */
    R[5] = lds[offset_lds + (thread + 120) * lstride]; /* stockham.py:542 */
    R[6] = lds[offset_lds + (thread + 144) * lstride]; /* stockham.py:542 */

    W    = twiddles[7 + 6 * (thread % 8)]; /* stockham.py:554 */
    t.x  = W.x * R[1].x - W.y * R[1].y; /* stockham.py:555 */
    t.y  = W.y * R[1].x + W.x * R[1].y; /* stockham.py:556 */
    R[1] = t; /* stockham.py:557 */
    W    = twiddles[8 + 6 * (thread % 8)]; /* stockham.py:554 */
    t.x  = W.x * R[2].x - W.y * R[2].y; /* stockham.py:555 */
    t.y  = W.y * R[2].x + W.x * R[2].y; /* stockham.py:556 */
    R[2] = t; /* stockham.py:557 */
    W    = twiddles[9 + 6 * (thread % 8)]; /* stockham.py:554 */
    t.x  = W.x * R[3].x - W.y * R[3].y; /* stockham.py:555 */
    t.y  = W.y * R[3].x + W.x * R[3].y; /* stockham.py:556 */
    R[3] = t; /* stockham.py:557 */
    W    = twiddles[10 + 6 * (thread % 8)]; /* stockham.py:554 */
    t.x  = W.x * R[4].x - W.y * R[4].y; /* stockham.py:555 */
    t.y  = W.y * R[4].x + W.x * R[4].y; /* stockham.py:556 */
    R[4] = t; /* stockham.py:557 */
    W    = twiddles[11 + 6 * (thread % 8)]; /* stockham.py:554 */
    t.x  = W.x * R[5].x - W.y * R[5].y; /* stockham.py:555 */
    t.y  = W.y * R[5].x + W.x * R[5].y; /* stockham.py:556 */
    R[5] = t; /* stockham.py:557 */
    W    = twiddles[12 + 6 * (thread % 8)]; /* stockham.py:554 */
    t.x  = W.x * R[6].x - W.y * R[6].y; /* stockham.py:555 */
    t.y  = W.y * R[6].x + W.x * R[6].y; /* stockham.py:556 */
    R[6] = t; /* stockham.py:557 */

    FwdRad7B1(&R[0], &R[1], &R[2], &R[3], &R[4], &R[5], &R[6]); /* stockham.py:566 */

    __syncthreads();
    if(write && thread < 24)
    {
        lds[offset_lds + ((thread / 8) * 56 + thread % 8 + 0) * lstride]
            = R[0]; /* stockham.py:577 */
        lds[offset_lds + ((thread / 8) * 56 + thread % 8 + 8) * lstride]
            = R[1]; /* stockham.py:577 */
        lds[offset_lds + ((thread / 8) * 56 + thread % 8 + 16) * lstride]
            = R[2]; /* stockham.py:577 */
        lds[offset_lds + ((thread / 8) * 56 + thread % 8 + 24) * lstride]
            = R[3]; /* stockham.py:577 */
        lds[offset_lds + ((thread / 8) * 56 + thread % 8 + 32) * lstride]
            = R[4]; /* stockham.py:577 */
        lds[offset_lds + ((thread / 8) * 56 + thread % 8 + 40) * lstride]
            = R[5]; /* stockham.py:577 */
        lds[offset_lds + ((thread / 8) * 56 + thread % 8 + 48) * lstride]
            = R[6]; /* stockham.py:577 */
    }

    // pass 2
    __syncthreads();
    R[0] = lds[offset_lds + (thread + 0) * lstride]; /* stockham.py:542 */
    R[1] = lds[offset_lds + (thread + 56) * lstride]; /* stockham.py:542 */
    R[2] = lds[offset_lds + (thread + 112) * lstride]; /* stockham.py:542 */

    W    = twiddles[55 + 2 * (thread % 56)]; /* stockham.py:554 */
    t.x  = W.x * R[1].x - W.y * R[1].y; /* stockham.py:555 */
    t.y  = W.y * R[1].x + W.x * R[1].y; /* stockham.py:556 */
    R[1] = t; /* stockham.py:557 */
    W    = twiddles[56 + 2 * (thread % 56)]; /* stockham.py:554 */
    t.x  = W.x * R[2].x - W.y * R[2].y; /* stockham.py:555 */
    t.y  = W.y * R[2].x + W.x * R[2].y; /* stockham.py:556 */
    R[2] = t; /* stockham.py:557 */

    FwdRad3B1(&R[0], &R[1], &R[2]); /* stockham.py:566 */

    __syncthreads();
    if(write)
    {
        lds[offset_lds + ((thread / 56) * 168 + thread % 56 + 0) * lstride]
            = R[0]; /* stockham.py:577 */
        lds[offset_lds + ((thread / 56) * 168 + thread % 56 + 56) * lstride]
            = R[1]; /* stockham.py:577 */
        lds[offset_lds + ((thread / 56) * 168 + thread % 56 + 112) * lstride]
            = R[2]; /* stockham.py:577 */
    }
}
/* stockham.py:709 */
template <typename scalar_type, StrideBin sb, EmbeddedType ebtype, CallbackType cbtype>
__global__
    __launch_bounds__(224) void op_forward_length168_SBRR(const scalar_type* __restrict__ twiddles,
                                                          const size_t dim,
                                                          const size_t* __restrict__ lengths,
                                                          const size_t* __restrict__ stride_in,
                                                          const size_t* __restrict__ stride_out,
                                                          const size_t       nbatch,
                                                          const unsigned int lds_padding,
                                                          void* __restrict__ load_cb_fn,
                                                          void* __restrict__ load_cb_data,
                                                          uint32_t load_cb_lds_bytes,
                                                          void* __restrict__ store_cb_fn,
                                                          void* __restrict__ store_cb_data,
                                                          scalar_type* __restrict__ buf_in,
                                                          scalar_type* __restrict__ buf_out)
{
    // this kernel:
    //   uses 56 threads per transform
    //   does 4 transforms per thread block
    // therefore it should be called with 224 threads per thread block
    extern __shared__ unsigned char __align__(sizeof(scalar_type)) lds_uchar[];
    scalar_type* __restrict__ lds = reinterpret_cast<scalar_type*>(lds_uchar);
    size_t       offset_in        = 0;
    size_t       offset_out       = 0;
    unsigned int offset_lds;
    size_t       stride_lds;
    size_t       batch;
    size_t       transform;
    size_t       thread;
    bool         write;
    const size_t stride0_in  = (sb == SB_UNIT) ? (1) : (stride_in[0]);
    const size_t stride0_out = (sb == SB_UNIT) ? (1) : (stride_out[0]);
    auto         load_cb     = get_load_cb<scalar_type, cbtype>(load_cb_fn);
    auto         store_cb    = get_store_cb<scalar_type, cbtype>(store_cb_fn);

    // large twiddles

    // offsets
    size_t remaining;
    size_t plength = 1;
    size_t index_along_d;
    transform = blockIdx.x * 4 + threadIdx.x / 56; /* stockham.py:363 */
    remaining = transform; /* stockham.py:364 */
    for(int d = 1; d < dim; ++d)
    {
        plength       = plength * lengths[d]; /* stockham.py:367 */
        index_along_d = remaining % lengths[d]; /* stockham.py:368 */
        remaining     = remaining / lengths[d]; /* stockham.py:369 */
        offset_in     = offset_in + index_along_d * stride_in[d]; /* generator.py:992 */
        offset_out    = offset_out + index_along_d * stride_out[d]; /* generator.py:993 */
    }
    batch      = transform / plength; /* stockham.py:371 */
    offset_in  = offset_in + batch * stride_in[dim]; /* generator.py:992 */
    offset_out = offset_out + batch * stride_out[dim]; /* generator.py:993 */
    offset_lds = (168 + lds_padding) * (transform % 4); /* stockham.py:373 */

    if(batch >= nbatch)
    {
        return;
    }

    // load global
    thread = threadIdx.x % 56; /* stockham.py:384 */
    lds[offset_lds + thread + 0]
        = load_cb(buf_in, offset_in + (thread + 0) * stride0_in, load_cb_data, nullptr);
    ; /* stockham.py:387 */
    lds[offset_lds + thread + 56]
        = load_cb(buf_in, offset_in + (thread + 56) * stride0_in, load_cb_data, nullptr);
    ; /* stockham.py:387 */
    lds[offset_lds + thread + 112]
        = load_cb(buf_in, offset_in + (thread + 112) * stride0_in, load_cb_data, nullptr);
    ; /* stockham.py:387 */

    // append extra global loading for C2Real pre-process only
    if(ebtype == EmbeddedType::C2Real_PRE)
    {
        // use the last thread of each transform to load one more element per row
        if(thread == 55)
        {
            lds[offset_lds + thread + 112 + 1] = load_cb(
                buf_in, offset_in + (thread + 112 + 1) * stride0_in, load_cb_data, nullptr);
            ; /* stockham.py:395 */
        }
    }

    // handle even-length real to complex pre-process in lds before transform
    if(ebtype == EmbeddedType::C2Real_PRE)
    {
        __syncthreads();

        real_pre_process_kernel_inplace<scalar_type, true>(thread % 84 + 0,
                                                           168 - thread % 84 - 0,
                                                           84,
                                                           &lds[offset_lds],
                                                           0,
                                                           &twiddles[168]); /* stockham.py:338 */

        real_pre_process_kernel_inplace<scalar_type, true>(thread % 84 + 56,
                                                           168 - thread % 84 - 56,
                                                           84,
                                                           &lds[offset_lds],
                                                           0,
                                                           &twiddles[168]); /* stockham.py:338 */

        __syncthreads();
    }

    // transform
    write = true; /* stockham.py:681 */
    op_forward_length168_SBRR_device<scalar_type, SB_UNIT>(
        lds, twiddles, stride_lds, offset_lds, write); /* stockham.py:686 */

    // handle even-length complex to real post-process in lds after transform
    if(ebtype == EmbeddedType::Real2C_POST)
    {
        __syncthreads();

        real_post_process_kernel_inplace<scalar_type, true>(thread % 84 + 0,
                                                            168 - thread % 84 - 0,
                                                            84,
                                                            &lds[offset_lds],
                                                            0,
                                                            &twiddles[168]); /* stockham.py:338 */

        real_post_process_kernel_inplace<scalar_type, true>(thread % 84 + 56,
                                                            168 - thread % 84 - 56,
                                                            84,
                                                            &lds[offset_lds],
                                                            0,
                                                            &twiddles[168]); /* stockham.py:338 */
    }

    // store global
    __syncthreads();
    store_cb(buf_out,
             offset_out + (thread + 0) * stride0_out,
             lds[offset_lds + thread + 0],
             store_cb_data,
             nullptr);
    store_cb(buf_out,
             offset_out + (thread + 56) * stride0_out,
             lds[offset_lds + thread + 56],
             store_cb_data,
             nullptr);
    store_cb(buf_out,
             offset_out + (thread + 112) * stride0_out,
             lds[offset_lds + thread + 112],
             store_cb_data,
             nullptr);

    // append extra global write for Real2C post-process only
    if(ebtype == EmbeddedType::Real2C_POST)
    {
        // use the last thread of each transform to write one more element per row
        if(thread == 55)
        {
            store_cb(buf_out,
                     offset_out + (thread + 112 + 1) * stride0_out,
                     lds[offset_lds + thread + 112 + 1],
                     store_cb_data,
                     nullptr);
        }
    }
}
/* stockham.py:709 */
template <typename scalar_type, StrideBin sb, EmbeddedType ebtype, CallbackType cbtype>
__global__ __launch_bounds__(224) void op_forward_length168_SBRR(
    const scalar_type* __restrict__ twiddles,
    const size_t dim,
    const size_t* __restrict__ lengths,
    const size_t* __restrict__ stride_in,
    const size_t* __restrict__ stride_out,
    const size_t       nbatch,
    const unsigned int lds_padding,
    void* __restrict__ load_cb_fn,
    void* __restrict__ load_cb_data,
    uint32_t load_cb_lds_bytes,
    void* __restrict__ store_cb_fn,
    void* __restrict__ store_cb_data,
    scalar_type* __restrict__ buf_in,
    real_type_t<scalar_type>* __restrict__ buf_outre,
    real_type_t<scalar_type>* __restrict__ buf_outim)
{
    // this kernel:
    //   uses 56 threads per transform
    //   does 4 transforms per thread block
    // therefore it should be called with 224 threads per thread block
    extern __shared__ unsigned char __align__(sizeof(scalar_type)) lds_uchar[];
    scalar_type* __restrict__ lds = reinterpret_cast<scalar_type*>(lds_uchar);
    size_t       offset_in        = 0;
    size_t       offset_out       = 0;
    unsigned int offset_lds;
    size_t       stride_lds;
    size_t       batch;
    size_t       transform;
    size_t       thread;
    bool         write;
    const size_t stride0_in  = (sb == SB_UNIT) ? (1) : (stride_in[0]);
    const size_t stride0_out = (sb == SB_UNIT) ? (1) : (stride_out[0]);
    auto         load_cb     = get_load_cb<scalar_type, cbtype>(load_cb_fn);
    auto         store_cb    = get_store_cb<scalar_type, cbtype>(store_cb_fn);

    // large twiddles

    // offsets
    size_t remaining;
    size_t plength = 1;
    size_t index_along_d;
    transform = blockIdx.x * 4 + threadIdx.x / 56; /* stockham.py:363 */
    remaining = transform; /* stockham.py:364 */
    for(int d = 1; d < dim; ++d)
    {
        plength       = plength * lengths[d]; /* stockham.py:367 */
        index_along_d = remaining % lengths[d]; /* stockham.py:368 */
        remaining     = remaining / lengths[d]; /* stockham.py:369 */
        offset_in     = offset_in + index_along_d * stride_in[d]; /* generator.py:992 */
        offset_out    = offset_out + index_along_d * stride_out[d]; /* generator.py:993 */
    }
    batch      = transform / plength; /* stockham.py:371 */
    offset_in  = offset_in + batch * stride_in[dim]; /* generator.py:992 */
    offset_out = offset_out + batch * stride_out[dim]; /* generator.py:993 */
    offset_lds = (168 + lds_padding) * (transform % 4); /* stockham.py:373 */

    if(batch >= nbatch)
    {
        return;
    }

    // load global
    thread = threadIdx.x % 56; /* stockham.py:384 */
    lds[offset_lds + thread + 0]
        = load_cb(buf_in, offset_in + (thread + 0) * stride0_in, load_cb_data, nullptr);
    ; /* stockham.py:387 */
    lds[offset_lds + thread + 56]
        = load_cb(buf_in, offset_in + (thread + 56) * stride0_in, load_cb_data, nullptr);
    ; /* stockham.py:387 */
    lds[offset_lds + thread + 112]
        = load_cb(buf_in, offset_in + (thread + 112) * stride0_in, load_cb_data, nullptr);
    ; /* stockham.py:387 */

    // append extra global loading for C2Real pre-process only
    if(ebtype == EmbeddedType::C2Real_PRE)
    {
        // use the last thread of each transform to load one more element per row
        if(thread == 55)
        {
            lds[offset_lds + thread + 112 + 1] = load_cb(
                buf_in, offset_in + (thread + 112 + 1) * stride0_in, load_cb_data, nullptr);
            ; /* stockham.py:395 */
        }
    }

    // handle even-length real to complex pre-process in lds before transform
    if(ebtype == EmbeddedType::C2Real_PRE)
    {
        __syncthreads();

        real_pre_process_kernel_inplace<scalar_type, true>(thread % 84 + 0,
                                                           168 - thread % 84 - 0,
                                                           84,
                                                           &lds[offset_lds],
                                                           0,
                                                           &twiddles[168]); /* stockham.py:338 */

        real_pre_process_kernel_inplace<scalar_type, true>(thread % 84 + 56,
                                                           168 - thread % 84 - 56,
                                                           84,
                                                           &lds[offset_lds],
                                                           0,
                                                           &twiddles[168]); /* stockham.py:338 */

        __syncthreads();
    }

    // transform
    write = true; /* stockham.py:681 */
    op_forward_length168_SBRR_device<scalar_type, SB_UNIT>(
        lds, twiddles, stride_lds, offset_lds, write); /* stockham.py:686 */

    // handle even-length complex to real post-process in lds after transform
    if(ebtype == EmbeddedType::Real2C_POST)
    {
        __syncthreads();

        real_post_process_kernel_inplace<scalar_type, true>(thread % 84 + 0,
                                                            168 - thread % 84 - 0,
                                                            84,
                                                            &lds[offset_lds],
                                                            0,
                                                            &twiddles[168]); /* stockham.py:338 */

        real_post_process_kernel_inplace<scalar_type, true>(thread % 84 + 56,
                                                            168 - thread % 84 - 56,
                                                            84,
                                                            &lds[offset_lds],
                                                            0,
                                                            &twiddles[168]); /* stockham.py:338 */
    }

    // store global
    __syncthreads();
    buf_outre[offset_out + (thread + 0) * stride0_out]
        = lds[offset_lds + thread + 0].x; /* generator.py:906 */
    buf_outim[offset_out + (thread + 0) * stride0_out]
        = lds[offset_lds + thread + 0].y; /* generator.py:908 */
    buf_outre[offset_out + (thread + 56) * stride0_out]
        = lds[offset_lds + thread + 56].x; /* generator.py:906 */
    buf_outim[offset_out + (thread + 56) * stride0_out]
        = lds[offset_lds + thread + 56].y; /* generator.py:908 */
    buf_outre[offset_out + (thread + 112) * stride0_out]
        = lds[offset_lds + thread + 112].x; /* generator.py:906 */
    buf_outim[offset_out + (thread + 112) * stride0_out]
        = lds[offset_lds + thread + 112].y; /* generator.py:908 */

    // append extra global write for Real2C post-process only
    if(ebtype == EmbeddedType::Real2C_POST)
    {
        // use the last thread of each transform to write one more element per row
        if(thread == 55)
        {
            buf_outre[offset_out + (thread + 112 + 1) * stride0_out]
                = lds[offset_lds + thread + 112 + 1].x; /* generator.py:906 */
            buf_outim[offset_out + (thread + 112 + 1) * stride0_out]
                = lds[offset_lds + thread + 112 + 1].y; /* generator.py:908 */
        }
    }
}
/* stockham.py:709 */
template <typename scalar_type, StrideBin sb, EmbeddedType ebtype, CallbackType cbtype>
__global__ __launch_bounds__(224) void op_forward_length168_SBRR(
    const scalar_type* __restrict__ twiddles,
    const size_t dim,
    const size_t* __restrict__ lengths,
    const size_t* __restrict__ stride_in,
    const size_t* __restrict__ stride_out,
    const size_t       nbatch,
    const unsigned int lds_padding,
    void* __restrict__ load_cb_fn,
    void* __restrict__ load_cb_data,
    uint32_t load_cb_lds_bytes,
    void* __restrict__ store_cb_fn,
    void* __restrict__ store_cb_data,
    real_type_t<scalar_type>* __restrict__ buf_inre,
    real_type_t<scalar_type>* __restrict__ buf_inim,
    scalar_type* __restrict__ buf_out)
{
    // this kernel:
    //   uses 56 threads per transform
    //   does 4 transforms per thread block
    // therefore it should be called with 224 threads per thread block
    extern __shared__ unsigned char __align__(sizeof(scalar_type)) lds_uchar[];
    scalar_type* __restrict__ lds = reinterpret_cast<scalar_type*>(lds_uchar);
    size_t       offset_in        = 0;
    size_t       offset_out       = 0;
    unsigned int offset_lds;
    size_t       stride_lds;
    size_t       batch;
    size_t       transform;
    size_t       thread;
    bool         write;
    const size_t stride0_in  = (sb == SB_UNIT) ? (1) : (stride_in[0]);
    const size_t stride0_out = (sb == SB_UNIT) ? (1) : (stride_out[0]);
    auto         load_cb     = get_load_cb<scalar_type, cbtype>(load_cb_fn);
    auto         store_cb    = get_store_cb<scalar_type, cbtype>(store_cb_fn);

    // large twiddles

    // offsets
    size_t remaining;
    size_t plength = 1;
    size_t index_along_d;
    transform = blockIdx.x * 4 + threadIdx.x / 56; /* stockham.py:363 */
    remaining = transform; /* stockham.py:364 */
    for(int d = 1; d < dim; ++d)
    {
        plength       = plength * lengths[d]; /* stockham.py:367 */
        index_along_d = remaining % lengths[d]; /* stockham.py:368 */
        remaining     = remaining / lengths[d]; /* stockham.py:369 */
        offset_in     = offset_in + index_along_d * stride_in[d]; /* generator.py:992 */
        offset_out    = offset_out + index_along_d * stride_out[d]; /* generator.py:993 */
    }
    batch      = transform / plength; /* stockham.py:371 */
    offset_in  = offset_in + batch * stride_in[dim]; /* generator.py:992 */
    offset_out = offset_out + batch * stride_out[dim]; /* generator.py:993 */
    offset_lds = (168 + lds_padding) * (transform % 4); /* stockham.py:373 */

    if(batch >= nbatch)
    {
        return;
    }

    // load global
    thread = threadIdx.x % 56; /* stockham.py:384 */
    lds[offset_lds + thread + 0]
        = {buf_inre[offset_in + (thread + 0) * stride0_in],
           buf_inim[offset_in + (thread + 0) * stride0_in]}; /* generator.py:872 */
    lds[offset_lds + thread + 56]
        = {buf_inre[offset_in + (thread + 56) * stride0_in],
           buf_inim[offset_in + (thread + 56) * stride0_in]}; /* generator.py:872 */
    lds[offset_lds + thread + 112]
        = {buf_inre[offset_in + (thread + 112) * stride0_in],
           buf_inim[offset_in + (thread + 112) * stride0_in]}; /* generator.py:872 */

    // append extra global loading for C2Real pre-process only
    if(ebtype == EmbeddedType::C2Real_PRE)
    {
        // use the last thread of each transform to load one more element per row
        if(thread == 55)
        {
            lds[offset_lds + thread + 112 + 1]
                = {buf_inre[offset_in + (thread + 112 + 1) * stride0_in],
                   buf_inim[offset_in + (thread + 112 + 1) * stride0_in]}; /* generator.py:872 */
        }
    }

    // handle even-length real to complex pre-process in lds before transform
    if(ebtype == EmbeddedType::C2Real_PRE)
    {
        __syncthreads();

        real_pre_process_kernel_inplace<scalar_type, true>(thread % 84 + 0,
                                                           168 - thread % 84 - 0,
                                                           84,
                                                           &lds[offset_lds],
                                                           0,
                                                           &twiddles[168]); /* stockham.py:338 */

        real_pre_process_kernel_inplace<scalar_type, true>(thread % 84 + 56,
                                                           168 - thread % 84 - 56,
                                                           84,
                                                           &lds[offset_lds],
                                                           0,
                                                           &twiddles[168]); /* stockham.py:338 */

        __syncthreads();
    }

    // transform
    write = true; /* stockham.py:681 */
    op_forward_length168_SBRR_device<scalar_type, SB_UNIT>(
        lds, twiddles, stride_lds, offset_lds, write); /* stockham.py:686 */

    // handle even-length complex to real post-process in lds after transform
    if(ebtype == EmbeddedType::Real2C_POST)
    {
        __syncthreads();

        real_post_process_kernel_inplace<scalar_type, true>(thread % 84 + 0,
                                                            168 - thread % 84 - 0,
                                                            84,
                                                            &lds[offset_lds],
                                                            0,
                                                            &twiddles[168]); /* stockham.py:338 */

        real_post_process_kernel_inplace<scalar_type, true>(thread % 84 + 56,
                                                            168 - thread % 84 - 56,
                                                            84,
                                                            &lds[offset_lds],
                                                            0,
                                                            &twiddles[168]); /* stockham.py:338 */
    }

    // store global
    __syncthreads();
    store_cb(buf_out,
             offset_out + (thread + 0) * stride0_out,
             lds[offset_lds + thread + 0],
             store_cb_data,
             nullptr);
    store_cb(buf_out,
             offset_out + (thread + 56) * stride0_out,
             lds[offset_lds + thread + 56],
             store_cb_data,
             nullptr);
    store_cb(buf_out,
             offset_out + (thread + 112) * stride0_out,
             lds[offset_lds + thread + 112],
             store_cb_data,
             nullptr);

    // append extra global write for Real2C post-process only
    if(ebtype == EmbeddedType::Real2C_POST)
    {
        // use the last thread of each transform to write one more element per row
        if(thread == 55)
        {
            store_cb(buf_out,
                     offset_out + (thread + 112 + 1) * stride0_out,
                     lds[offset_lds + thread + 112 + 1],
                     store_cb_data,
                     nullptr);
        }
    }
}
/* stockham.py:709 */
template <typename scalar_type, StrideBin sb, EmbeddedType ebtype, CallbackType cbtype>
__global__ __launch_bounds__(224) void op_forward_length168_SBRR(
    const scalar_type* __restrict__ twiddles,
    const size_t dim,
    const size_t* __restrict__ lengths,
    const size_t* __restrict__ stride_in,
    const size_t* __restrict__ stride_out,
    const size_t       nbatch,
    const unsigned int lds_padding,
    void* __restrict__ load_cb_fn,
    void* __restrict__ load_cb_data,
    uint32_t load_cb_lds_bytes,
    void* __restrict__ store_cb_fn,
    void* __restrict__ store_cb_data,
    real_type_t<scalar_type>* __restrict__ buf_inre,
    real_type_t<scalar_type>* __restrict__ buf_inim,
    real_type_t<scalar_type>* __restrict__ buf_outre,
    real_type_t<scalar_type>* __restrict__ buf_outim)
{
    // this kernel:
    //   uses 56 threads per transform
    //   does 4 transforms per thread block
    // therefore it should be called with 224 threads per thread block
    extern __shared__ unsigned char __align__(sizeof(scalar_type)) lds_uchar[];
    scalar_type* __restrict__ lds = reinterpret_cast<scalar_type*>(lds_uchar);
    size_t       offset_in        = 0;
    size_t       offset_out       = 0;
    unsigned int offset_lds;
    size_t       stride_lds;
    size_t       batch;
    size_t       transform;
    size_t       thread;
    bool         write;
    const size_t stride0_in  = (sb == SB_UNIT) ? (1) : (stride_in[0]);
    const size_t stride0_out = (sb == SB_UNIT) ? (1) : (stride_out[0]);
    auto         load_cb     = get_load_cb<scalar_type, cbtype>(load_cb_fn);
    auto         store_cb    = get_store_cb<scalar_type, cbtype>(store_cb_fn);

    // large twiddles

    // offsets
    size_t remaining;
    size_t plength = 1;
    size_t index_along_d;
    transform = blockIdx.x * 4 + threadIdx.x / 56; /* stockham.py:363 */
    remaining = transform; /* stockham.py:364 */
    for(int d = 1; d < dim; ++d)
    {
        plength       = plength * lengths[d]; /* stockham.py:367 */
        index_along_d = remaining % lengths[d]; /* stockham.py:368 */
        remaining     = remaining / lengths[d]; /* stockham.py:369 */
        offset_in     = offset_in + index_along_d * stride_in[d]; /* generator.py:992 */
        offset_out    = offset_out + index_along_d * stride_out[d]; /* generator.py:993 */
    }
    batch      = transform / plength; /* stockham.py:371 */
    offset_in  = offset_in + batch * stride_in[dim]; /* generator.py:992 */
    offset_out = offset_out + batch * stride_out[dim]; /* generator.py:993 */
    offset_lds = (168 + lds_padding) * (transform % 4); /* stockham.py:373 */

    if(batch >= nbatch)
    {
        return;
    }

    // load global
    thread = threadIdx.x % 56; /* stockham.py:384 */
    lds[offset_lds + thread + 0]
        = {buf_inre[offset_in + (thread + 0) * stride0_in],
           buf_inim[offset_in + (thread + 0) * stride0_in]}; /* generator.py:872 */
    lds[offset_lds + thread + 56]
        = {buf_inre[offset_in + (thread + 56) * stride0_in],
           buf_inim[offset_in + (thread + 56) * stride0_in]}; /* generator.py:872 */
    lds[offset_lds + thread + 112]
        = {buf_inre[offset_in + (thread + 112) * stride0_in],
           buf_inim[offset_in + (thread + 112) * stride0_in]}; /* generator.py:872 */

    // append extra global loading for C2Real pre-process only
    if(ebtype == EmbeddedType::C2Real_PRE)
    {
        // use the last thread of each transform to load one more element per row
        if(thread == 55)
        {
            lds[offset_lds + thread + 112 + 1]
                = {buf_inre[offset_in + (thread + 112 + 1) * stride0_in],
                   buf_inim[offset_in + (thread + 112 + 1) * stride0_in]}; /* generator.py:872 */
        }
    }

    // handle even-length real to complex pre-process in lds before transform
    if(ebtype == EmbeddedType::C2Real_PRE)
    {
        __syncthreads();

        real_pre_process_kernel_inplace<scalar_type, true>(thread % 84 + 0,
                                                           168 - thread % 84 - 0,
                                                           84,
                                                           &lds[offset_lds],
                                                           0,
                                                           &twiddles[168]); /* stockham.py:338 */

        real_pre_process_kernel_inplace<scalar_type, true>(thread % 84 + 56,
                                                           168 - thread % 84 - 56,
                                                           84,
                                                           &lds[offset_lds],
                                                           0,
                                                           &twiddles[168]); /* stockham.py:338 */

        __syncthreads();
    }

    // transform
    write = true; /* stockham.py:681 */
    op_forward_length168_SBRR_device<scalar_type, SB_UNIT>(
        lds, twiddles, stride_lds, offset_lds, write); /* stockham.py:686 */

    // handle even-length complex to real post-process in lds after transform
    if(ebtype == EmbeddedType::Real2C_POST)
    {
        __syncthreads();

        real_post_process_kernel_inplace<scalar_type, true>(thread % 84 + 0,
                                                            168 - thread % 84 - 0,
                                                            84,
                                                            &lds[offset_lds],
                                                            0,
                                                            &twiddles[168]); /* stockham.py:338 */

        real_post_process_kernel_inplace<scalar_type, true>(thread % 84 + 56,
                                                            168 - thread % 84 - 56,
                                                            84,
                                                            &lds[offset_lds],
                                                            0,
                                                            &twiddles[168]); /* stockham.py:338 */
    }

    // store global
    __syncthreads();
    buf_outre[offset_out + (thread + 0) * stride0_out]
        = lds[offset_lds + thread + 0].x; /* generator.py:906 */
    buf_outim[offset_out + (thread + 0) * stride0_out]
        = lds[offset_lds + thread + 0].y; /* generator.py:908 */
    buf_outre[offset_out + (thread + 56) * stride0_out]
        = lds[offset_lds + thread + 56].x; /* generator.py:906 */
    buf_outim[offset_out + (thread + 56) * stride0_out]
        = lds[offset_lds + thread + 56].y; /* generator.py:908 */
    buf_outre[offset_out + (thread + 112) * stride0_out]
        = lds[offset_lds + thread + 112].x; /* generator.py:906 */
    buf_outim[offset_out + (thread + 112) * stride0_out]
        = lds[offset_lds + thread + 112].y; /* generator.py:908 */

    // append extra global write for Real2C post-process only
    if(ebtype == EmbeddedType::Real2C_POST)
    {
        // use the last thread of each transform to write one more element per row
        if(thread == 55)
        {
            buf_outre[offset_out + (thread + 112 + 1) * stride0_out]
                = lds[offset_lds + thread + 112 + 1].x; /* generator.py:906 */
            buf_outim[offset_out + (thread + 112 + 1) * stride0_out]
                = lds[offset_lds + thread + 112 + 1].y; /* generator.py:908 */
        }
    }
}
/* stockham.py:765 */
template <typename scalar_type, StrideBin sb>
__device__ void ip_inverse_length168_SBRR_device(scalar_type* __restrict__ lds,
                                                 const scalar_type* __restrict__ twiddles,
                                                 size_t       stride_lds,
                                                 unsigned int offset_lds,
                                                 bool         write)
{
    size_t       thread;
    scalar_type  R[8];
    scalar_type  W;
    scalar_type  t;
    const size_t lstride = (sb == SB_UNIT) ? (1) : (stride_lds);
    thread               = threadIdx.x % 56; /* stockham.py:731 */

    // pass 0
    __syncthreads();
    R[0] = lds[offset_lds + (thread + 0) * lstride]; /* stockham.py:542 */
    R[1] = lds[offset_lds + (thread + 21) * lstride]; /* stockham.py:542 */
    R[2] = lds[offset_lds + (thread + 42) * lstride]; /* stockham.py:542 */
    R[3] = lds[offset_lds + (thread + 63) * lstride]; /* stockham.py:542 */
    R[4] = lds[offset_lds + (thread + 84) * lstride]; /* stockham.py:542 */
    R[5] = lds[offset_lds + (thread + 105) * lstride]; /* stockham.py:542 */
    R[6] = lds[offset_lds + (thread + 126) * lstride]; /* stockham.py:542 */
    R[7] = lds[offset_lds + (thread + 147) * lstride]; /* stockham.py:542 */

    InvRad8B1(&R[0], &R[1], &R[2], &R[3], &R[4], &R[5], &R[6], &R[7]); /* stockham.py:566 */

    __syncthreads();
    if(write && thread < 21)
    {
        lds[offset_lds + ((thread / 1) * 8 + thread % 1 + 0) * lstride]
            = R[0]; /* stockham.py:577 */
        lds[offset_lds + ((thread / 1) * 8 + thread % 1 + 1) * lstride]
            = R[1]; /* stockham.py:577 */
        lds[offset_lds + ((thread / 1) * 8 + thread % 1 + 2) * lstride]
            = R[2]; /* stockham.py:577 */
        lds[offset_lds + ((thread / 1) * 8 + thread % 1 + 3) * lstride]
            = R[3]; /* stockham.py:577 */
        lds[offset_lds + ((thread / 1) * 8 + thread % 1 + 4) * lstride]
            = R[4]; /* stockham.py:577 */
        lds[offset_lds + ((thread / 1) * 8 + thread % 1 + 5) * lstride]
            = R[5]; /* stockham.py:577 */
        lds[offset_lds + ((thread / 1) * 8 + thread % 1 + 6) * lstride]
            = R[6]; /* stockham.py:577 */
        lds[offset_lds + ((thread / 1) * 8 + thread % 1 + 7) * lstride]
            = R[7]; /* stockham.py:577 */
    }

    // pass 1
    __syncthreads();
    R[0] = lds[offset_lds + (thread + 0) * lstride]; /* stockham.py:542 */
    R[1] = lds[offset_lds + (thread + 24) * lstride]; /* stockham.py:542 */
    R[2] = lds[offset_lds + (thread + 48) * lstride]; /* stockham.py:542 */
    R[3] = lds[offset_lds + (thread + 72) * lstride]; /* stockham.py:542 */
    R[4] = lds[offset_lds + (thread + 96) * lstride]; /* stockham.py:542 */
    R[5] = lds[offset_lds + (thread + 120) * lstride]; /* stockham.py:542 */
    R[6] = lds[offset_lds + (thread + 144) * lstride]; /* stockham.py:542 */

    W    = {twiddles[7 + 6 * (thread % 8)].x,
         -twiddles[7 + 6 * (thread % 8)].y}; /* generator.py:1065 */
    t.x  = W.x * R[1].x - W.y * R[1].y; /* stockham.py:555 */
    t.y  = W.y * R[1].x + W.x * R[1].y; /* stockham.py:556 */
    R[1] = t; /* stockham.py:557 */
    W    = {twiddles[8 + 6 * (thread % 8)].x,
         -twiddles[8 + 6 * (thread % 8)].y}; /* generator.py:1065 */
    t.x  = W.x * R[2].x - W.y * R[2].y; /* stockham.py:555 */
    t.y  = W.y * R[2].x + W.x * R[2].y; /* stockham.py:556 */
    R[2] = t; /* stockham.py:557 */
    W    = {twiddles[9 + 6 * (thread % 8)].x,
         -twiddles[9 + 6 * (thread % 8)].y}; /* generator.py:1065 */
    t.x  = W.x * R[3].x - W.y * R[3].y; /* stockham.py:555 */
    t.y  = W.y * R[3].x + W.x * R[3].y; /* stockham.py:556 */
    R[3] = t; /* stockham.py:557 */
    W    = {twiddles[10 + 6 * (thread % 8)].x,
         -twiddles[10 + 6 * (thread % 8)].y}; /* generator.py:1065 */
    t.x  = W.x * R[4].x - W.y * R[4].y; /* stockham.py:555 */
    t.y  = W.y * R[4].x + W.x * R[4].y; /* stockham.py:556 */
    R[4] = t; /* stockham.py:557 */
    W    = {twiddles[11 + 6 * (thread % 8)].x,
         -twiddles[11 + 6 * (thread % 8)].y}; /* generator.py:1065 */
    t.x  = W.x * R[5].x - W.y * R[5].y; /* stockham.py:555 */
    t.y  = W.y * R[5].x + W.x * R[5].y; /* stockham.py:556 */
    R[5] = t; /* stockham.py:557 */
    W    = {twiddles[12 + 6 * (thread % 8)].x,
         -twiddles[12 + 6 * (thread % 8)].y}; /* generator.py:1065 */
    t.x  = W.x * R[6].x - W.y * R[6].y; /* stockham.py:555 */
    t.y  = W.y * R[6].x + W.x * R[6].y; /* stockham.py:556 */
    R[6] = t; /* stockham.py:557 */

    InvRad7B1(&R[0], &R[1], &R[2], &R[3], &R[4], &R[5], &R[6]); /* stockham.py:566 */

    __syncthreads();
    if(write && thread < 24)
    {
        lds[offset_lds + ((thread / 8) * 56 + thread % 8 + 0) * lstride]
            = R[0]; /* stockham.py:577 */
        lds[offset_lds + ((thread / 8) * 56 + thread % 8 + 8) * lstride]
            = R[1]; /* stockham.py:577 */
        lds[offset_lds + ((thread / 8) * 56 + thread % 8 + 16) * lstride]
            = R[2]; /* stockham.py:577 */
        lds[offset_lds + ((thread / 8) * 56 + thread % 8 + 24) * lstride]
            = R[3]; /* stockham.py:577 */
        lds[offset_lds + ((thread / 8) * 56 + thread % 8 + 32) * lstride]
            = R[4]; /* stockham.py:577 */
        lds[offset_lds + ((thread / 8) * 56 + thread % 8 + 40) * lstride]
            = R[5]; /* stockham.py:577 */
        lds[offset_lds + ((thread / 8) * 56 + thread % 8 + 48) * lstride]
            = R[6]; /* stockham.py:577 */
    }

    // pass 2
    __syncthreads();
    R[0] = lds[offset_lds + (thread + 0) * lstride]; /* stockham.py:542 */
    R[1] = lds[offset_lds + (thread + 56) * lstride]; /* stockham.py:542 */
    R[2] = lds[offset_lds + (thread + 112) * lstride]; /* stockham.py:542 */

    W    = {twiddles[55 + 2 * (thread % 56)].x,
         -twiddles[55 + 2 * (thread % 56)].y}; /* generator.py:1065 */
    t.x  = W.x * R[1].x - W.y * R[1].y; /* stockham.py:555 */
    t.y  = W.y * R[1].x + W.x * R[1].y; /* stockham.py:556 */
    R[1] = t; /* stockham.py:557 */
    W    = {twiddles[56 + 2 * (thread % 56)].x,
         -twiddles[56 + 2 * (thread % 56)].y}; /* generator.py:1065 */
    t.x  = W.x * R[2].x - W.y * R[2].y; /* stockham.py:555 */
    t.y  = W.y * R[2].x + W.x * R[2].y; /* stockham.py:556 */
    R[2] = t; /* stockham.py:557 */

    InvRad3B1(&R[0], &R[1], &R[2]); /* stockham.py:566 */

    __syncthreads();
    if(write)
    {
        lds[offset_lds + ((thread / 56) * 168 + thread % 56 + 0) * lstride]
            = R[0]; /* stockham.py:577 */
        lds[offset_lds + ((thread / 56) * 168 + thread % 56 + 56) * lstride]
            = R[1]; /* stockham.py:577 */
        lds[offset_lds + ((thread / 56) * 168 + thread % 56 + 112) * lstride]
            = R[2]; /* stockham.py:577 */
    }
}
/* stockham.py:709 */
template <typename scalar_type, StrideBin sb, EmbeddedType ebtype, CallbackType cbtype>
__global__
    __launch_bounds__(224) void ip_inverse_length168_SBRR(const scalar_type* __restrict__ twiddles,
                                                          const size_t dim,
                                                          const size_t* __restrict__ lengths,
                                                          const size_t* __restrict__ stride,
                                                          const size_t       nbatch,
                                                          const unsigned int lds_padding,
                                                          void* __restrict__ load_cb_fn,
                                                          void* __restrict__ load_cb_data,
                                                          uint32_t load_cb_lds_bytes,
                                                          void* __restrict__ store_cb_fn,
                                                          void* __restrict__ store_cb_data,
                                                          scalar_type* __restrict__ buf)
{
    // this kernel:
    //   uses 56 threads per transform
    //   does 4 transforms per thread block
    // therefore it should be called with 224 threads per thread block
    extern __shared__ unsigned char __align__(sizeof(scalar_type)) lds_uchar[];
    scalar_type* __restrict__ lds = reinterpret_cast<scalar_type*>(lds_uchar);
    size_t       offset           = 0;
    unsigned int offset_lds;
    size_t       stride_lds;
    size_t       batch;
    size_t       transform;
    size_t       thread;
    bool         write;
    const size_t stride0  = (sb == SB_UNIT) ? (1) : (stride[0]);
    auto         load_cb  = get_load_cb<scalar_type, cbtype>(load_cb_fn);
    auto         store_cb = get_store_cb<scalar_type, cbtype>(store_cb_fn);

    // large twiddles

    // offsets
    size_t remaining;
    size_t plength = 1;
    size_t index_along_d;
    transform = blockIdx.x * 4 + threadIdx.x / 56; /* stockham.py:363 */
    remaining = transform; /* stockham.py:364 */
    for(int d = 1; d < dim; ++d)
    {
        plength       = plength * lengths[d]; /* stockham.py:367 */
        index_along_d = remaining % lengths[d]; /* stockham.py:368 */
        remaining     = remaining / lengths[d]; /* stockham.py:369 */
        offset        = offset + index_along_d * stride[d]; /* stockham.py:370 */
    }
    batch      = transform / plength; /* stockham.py:371 */
    offset     = offset + batch * stride[dim]; /* stockham.py:372 */
    offset_lds = (168 + lds_padding) * (transform % 4); /* stockham.py:373 */

    if(batch >= nbatch)
    {
        return;
    }

    // load global
    thread = threadIdx.x % 56; /* stockham.py:384 */
    lds[offset_lds + thread + 0]
        = load_cb(buf, offset + (thread + 0) * stride0, load_cb_data, nullptr);
    ; /* stockham.py:387 */
    lds[offset_lds + thread + 56]
        = load_cb(buf, offset + (thread + 56) * stride0, load_cb_data, nullptr);
    ; /* stockham.py:387 */
    lds[offset_lds + thread + 112]
        = load_cb(buf, offset + (thread + 112) * stride0, load_cb_data, nullptr);
    ; /* stockham.py:387 */

    // append extra global loading for C2Real pre-process only
    if(ebtype == EmbeddedType::C2Real_PRE)
    {
        // use the last thread of each transform to load one more element per row
        if(thread == 55)
        {
            lds[offset_lds + thread + 112 + 1]
                = load_cb(buf, offset + (thread + 112 + 1) * stride0, load_cb_data, nullptr);
            ; /* stockham.py:395 */
        }
    }

    // handle even-length real to complex pre-process in lds before transform
    if(ebtype == EmbeddedType::C2Real_PRE)
    {
        __syncthreads();

        real_pre_process_kernel_inplace<scalar_type, true>(thread % 84 + 0,
                                                           168 - thread % 84 - 0,
                                                           84,
                                                           &lds[offset_lds],
                                                           0,
                                                           &twiddles[168]); /* stockham.py:338 */

        real_pre_process_kernel_inplace<scalar_type, true>(thread % 84 + 56,
                                                           168 - thread % 84 - 56,
                                                           84,
                                                           &lds[offset_lds],
                                                           0,
                                                           &twiddles[168]); /* stockham.py:338 */

        __syncthreads();
    }

    // transform
    write = true; /* stockham.py:681 */
    ip_inverse_length168_SBRR_device<scalar_type, SB_UNIT>(
        lds, twiddles, stride_lds, offset_lds, write); /* stockham.py:686 */

    // handle even-length complex to real post-process in lds after transform
    if(ebtype == EmbeddedType::Real2C_POST)
    {
        __syncthreads();

        real_post_process_kernel_inplace<scalar_type, true>(thread % 84 + 0,
                                                            168 - thread % 84 - 0,
                                                            84,
                                                            &lds[offset_lds],
                                                            0,
                                                            &twiddles[168]); /* stockham.py:338 */

        real_post_process_kernel_inplace<scalar_type, true>(thread % 84 + 56,
                                                            168 - thread % 84 - 56,
                                                            84,
                                                            &lds[offset_lds],
                                                            0,
                                                            &twiddles[168]); /* stockham.py:338 */
    }

    // store global
    __syncthreads();
    store_cb(
        buf, offset + (thread + 0) * stride0, lds[offset_lds + thread + 0], store_cb_data, nullptr);
    store_cb(buf,
             offset + (thread + 56) * stride0,
             lds[offset_lds + thread + 56],
             store_cb_data,
             nullptr);
    store_cb(buf,
             offset + (thread + 112) * stride0,
             lds[offset_lds + thread + 112],
             store_cb_data,
             nullptr);

    // append extra global write for Real2C post-process only
    if(ebtype == EmbeddedType::Real2C_POST)
    {
        // use the last thread of each transform to write one more element per row
        if(thread == 55)
        {
            store_cb(buf,
                     offset + (thread + 112 + 1) * stride0,
                     lds[offset_lds + thread + 112 + 1],
                     store_cb_data,
                     nullptr);
        }
    }
}
/* stockham.py:709 */
template <typename scalar_type, StrideBin sb, EmbeddedType ebtype, CallbackType cbtype>
__global__ __launch_bounds__(224) void ip_inverse_length168_SBRR(
    const scalar_type* __restrict__ twiddles,
    const size_t dim,
    const size_t* __restrict__ lengths,
    const size_t* __restrict__ stride,
    const size_t       nbatch,
    const unsigned int lds_padding,
    void* __restrict__ load_cb_fn,
    void* __restrict__ load_cb_data,
    uint32_t load_cb_lds_bytes,
    void* __restrict__ store_cb_fn,
    void* __restrict__ store_cb_data,
    real_type_t<scalar_type>* __restrict__ bufre,
    real_type_t<scalar_type>* __restrict__ bufim)
{
    // this kernel:
    //   uses 56 threads per transform
    //   does 4 transforms per thread block
    // therefore it should be called with 224 threads per thread block
    extern __shared__ unsigned char __align__(sizeof(scalar_type)) lds_uchar[];
    scalar_type* __restrict__ lds = reinterpret_cast<scalar_type*>(lds_uchar);
    size_t       offset           = 0;
    unsigned int offset_lds;
    size_t       stride_lds;
    size_t       batch;
    size_t       transform;
    size_t       thread;
    bool         write;
    const size_t stride0  = (sb == SB_UNIT) ? (1) : (stride[0]);
    auto         load_cb  = get_load_cb<scalar_type, cbtype>(load_cb_fn);
    auto         store_cb = get_store_cb<scalar_type, cbtype>(store_cb_fn);

    // large twiddles

    // offsets
    size_t remaining;
    size_t plength = 1;
    size_t index_along_d;
    transform = blockIdx.x * 4 + threadIdx.x / 56; /* stockham.py:363 */
    remaining = transform; /* stockham.py:364 */
    for(int d = 1; d < dim; ++d)
    {
        plength       = plength * lengths[d]; /* stockham.py:367 */
        index_along_d = remaining % lengths[d]; /* stockham.py:368 */
        remaining     = remaining / lengths[d]; /* stockham.py:369 */
        offset        = offset + index_along_d * stride[d]; /* stockham.py:370 */
    }
    batch      = transform / plength; /* stockham.py:371 */
    offset     = offset + batch * stride[dim]; /* stockham.py:372 */
    offset_lds = (168 + lds_padding) * (transform % 4); /* stockham.py:373 */

    if(batch >= nbatch)
    {
        return;
    }

    // load global
    thread                       = threadIdx.x % 56; /* stockham.py:384 */
    lds[offset_lds + thread + 0] = {bufre[offset + (thread + 0) * stride0],
                                    bufim[offset + (thread + 0) * stride0]}; /* generator.py:872 */
    lds[offset_lds + thread + 56]
        = {bufre[offset + (thread + 56) * stride0],
           bufim[offset + (thread + 56) * stride0]}; /* generator.py:872 */
    lds[offset_lds + thread + 112]
        = {bufre[offset + (thread + 112) * stride0],
           bufim[offset + (thread + 112) * stride0]}; /* generator.py:872 */

    // append extra global loading for C2Real pre-process only
    if(ebtype == EmbeddedType::C2Real_PRE)
    {
        // use the last thread of each transform to load one more element per row
        if(thread == 55)
        {
            lds[offset_lds + thread + 112 + 1]
                = {bufre[offset + (thread + 112 + 1) * stride0],
                   bufim[offset + (thread + 112 + 1) * stride0]}; /* generator.py:872 */
        }
    }

    // handle even-length real to complex pre-process in lds before transform
    if(ebtype == EmbeddedType::C2Real_PRE)
    {
        __syncthreads();

        real_pre_process_kernel_inplace<scalar_type, true>(thread % 84 + 0,
                                                           168 - thread % 84 - 0,
                                                           84,
                                                           &lds[offset_lds],
                                                           0,
                                                           &twiddles[168]); /* stockham.py:338 */

        real_pre_process_kernel_inplace<scalar_type, true>(thread % 84 + 56,
                                                           168 - thread % 84 - 56,
                                                           84,
                                                           &lds[offset_lds],
                                                           0,
                                                           &twiddles[168]); /* stockham.py:338 */

        __syncthreads();
    }

    // transform
    write = true; /* stockham.py:681 */
    ip_inverse_length168_SBRR_device<scalar_type, SB_UNIT>(
        lds, twiddles, stride_lds, offset_lds, write); /* stockham.py:686 */

    // handle even-length complex to real post-process in lds after transform
    if(ebtype == EmbeddedType::Real2C_POST)
    {
        __syncthreads();

        real_post_process_kernel_inplace<scalar_type, true>(thread % 84 + 0,
                                                            168 - thread % 84 - 0,
                                                            84,
                                                            &lds[offset_lds],
                                                            0,
                                                            &twiddles[168]); /* stockham.py:338 */

        real_post_process_kernel_inplace<scalar_type, true>(thread % 84 + 56,
                                                            168 - thread % 84 - 56,
                                                            84,
                                                            &lds[offset_lds],
                                                            0,
                                                            &twiddles[168]); /* stockham.py:338 */
    }

    // store global
    __syncthreads();
    bufre[offset + (thread + 0) * stride0] = lds[offset_lds + thread + 0].x; /* generator.py:906 */
    bufim[offset + (thread + 0) * stride0] = lds[offset_lds + thread + 0].y; /* generator.py:908 */
    bufre[offset + (thread + 56) * stride0]
        = lds[offset_lds + thread + 56].x; /* generator.py:906 */
    bufim[offset + (thread + 56) * stride0]
        = lds[offset_lds + thread + 56].y; /* generator.py:908 */
    bufre[offset + (thread + 112) * stride0]
        = lds[offset_lds + thread + 112].x; /* generator.py:906 */
    bufim[offset + (thread + 112) * stride0]
        = lds[offset_lds + thread + 112].y; /* generator.py:908 */

    // append extra global write for Real2C post-process only
    if(ebtype == EmbeddedType::Real2C_POST)
    {
        // use the last thread of each transform to write one more element per row
        if(thread == 55)
        {
            bufre[offset + (thread + 112 + 1) * stride0]
                = lds[offset_lds + thread + 112 + 1].x; /* generator.py:906 */
            bufim[offset + (thread + 112 + 1) * stride0]
                = lds[offset_lds + thread + 112 + 1].y; /* generator.py:908 */
        }
    }
}
/* stockham.py:765 */
template <typename scalar_type, StrideBin sb>
__device__ void op_inverse_length168_SBRR_device(scalar_type* __restrict__ lds,
                                                 const scalar_type* __restrict__ twiddles,
                                                 size_t       stride_lds,
                                                 unsigned int offset_lds,
                                                 bool         write)
{
    size_t       thread;
    scalar_type  R[8];
    scalar_type  W;
    scalar_type  t;
    const size_t lstride = (sb == SB_UNIT) ? (1) : (stride_lds);
    thread               = threadIdx.x % 56; /* stockham.py:731 */

    // pass 0
    __syncthreads();
    R[0] = lds[offset_lds + (thread + 0) * lstride]; /* stockham.py:542 */
    R[1] = lds[offset_lds + (thread + 21) * lstride]; /* stockham.py:542 */
    R[2] = lds[offset_lds + (thread + 42) * lstride]; /* stockham.py:542 */
    R[3] = lds[offset_lds + (thread + 63) * lstride]; /* stockham.py:542 */
    R[4] = lds[offset_lds + (thread + 84) * lstride]; /* stockham.py:542 */
    R[5] = lds[offset_lds + (thread + 105) * lstride]; /* stockham.py:542 */
    R[6] = lds[offset_lds + (thread + 126) * lstride]; /* stockham.py:542 */
    R[7] = lds[offset_lds + (thread + 147) * lstride]; /* stockham.py:542 */

    InvRad8B1(&R[0], &R[1], &R[2], &R[3], &R[4], &R[5], &R[6], &R[7]); /* stockham.py:566 */

    __syncthreads();
    if(write && thread < 21)
    {
        lds[offset_lds + ((thread / 1) * 8 + thread % 1 + 0) * lstride]
            = R[0]; /* stockham.py:577 */
        lds[offset_lds + ((thread / 1) * 8 + thread % 1 + 1) * lstride]
            = R[1]; /* stockham.py:577 */
        lds[offset_lds + ((thread / 1) * 8 + thread % 1 + 2) * lstride]
            = R[2]; /* stockham.py:577 */
        lds[offset_lds + ((thread / 1) * 8 + thread % 1 + 3) * lstride]
            = R[3]; /* stockham.py:577 */
        lds[offset_lds + ((thread / 1) * 8 + thread % 1 + 4) * lstride]
            = R[4]; /* stockham.py:577 */
        lds[offset_lds + ((thread / 1) * 8 + thread % 1 + 5) * lstride]
            = R[5]; /* stockham.py:577 */
        lds[offset_lds + ((thread / 1) * 8 + thread % 1 + 6) * lstride]
            = R[6]; /* stockham.py:577 */
        lds[offset_lds + ((thread / 1) * 8 + thread % 1 + 7) * lstride]
            = R[7]; /* stockham.py:577 */
    }

    // pass 1
    __syncthreads();
    R[0] = lds[offset_lds + (thread + 0) * lstride]; /* stockham.py:542 */
    R[1] = lds[offset_lds + (thread + 24) * lstride]; /* stockham.py:542 */
    R[2] = lds[offset_lds + (thread + 48) * lstride]; /* stockham.py:542 */
    R[3] = lds[offset_lds + (thread + 72) * lstride]; /* stockham.py:542 */
    R[4] = lds[offset_lds + (thread + 96) * lstride]; /* stockham.py:542 */
    R[5] = lds[offset_lds + (thread + 120) * lstride]; /* stockham.py:542 */
    R[6] = lds[offset_lds + (thread + 144) * lstride]; /* stockham.py:542 */

    W    = {twiddles[7 + 6 * (thread % 8)].x,
         -twiddles[7 + 6 * (thread % 8)].y}; /* generator.py:1065 */
    t.x  = W.x * R[1].x - W.y * R[1].y; /* stockham.py:555 */
    t.y  = W.y * R[1].x + W.x * R[1].y; /* stockham.py:556 */
    R[1] = t; /* stockham.py:557 */
    W    = {twiddles[8 + 6 * (thread % 8)].x,
         -twiddles[8 + 6 * (thread % 8)].y}; /* generator.py:1065 */
    t.x  = W.x * R[2].x - W.y * R[2].y; /* stockham.py:555 */
    t.y  = W.y * R[2].x + W.x * R[2].y; /* stockham.py:556 */
    R[2] = t; /* stockham.py:557 */
    W    = {twiddles[9 + 6 * (thread % 8)].x,
         -twiddles[9 + 6 * (thread % 8)].y}; /* generator.py:1065 */
    t.x  = W.x * R[3].x - W.y * R[3].y; /* stockham.py:555 */
    t.y  = W.y * R[3].x + W.x * R[3].y; /* stockham.py:556 */
    R[3] = t; /* stockham.py:557 */
    W    = {twiddles[10 + 6 * (thread % 8)].x,
         -twiddles[10 + 6 * (thread % 8)].y}; /* generator.py:1065 */
    t.x  = W.x * R[4].x - W.y * R[4].y; /* stockham.py:555 */
    t.y  = W.y * R[4].x + W.x * R[4].y; /* stockham.py:556 */
    R[4] = t; /* stockham.py:557 */
    W    = {twiddles[11 + 6 * (thread % 8)].x,
         -twiddles[11 + 6 * (thread % 8)].y}; /* generator.py:1065 */
    t.x  = W.x * R[5].x - W.y * R[5].y; /* stockham.py:555 */
    t.y  = W.y * R[5].x + W.x * R[5].y; /* stockham.py:556 */
    R[5] = t; /* stockham.py:557 */
    W    = {twiddles[12 + 6 * (thread % 8)].x,
         -twiddles[12 + 6 * (thread % 8)].y}; /* generator.py:1065 */
    t.x  = W.x * R[6].x - W.y * R[6].y; /* stockham.py:555 */
    t.y  = W.y * R[6].x + W.x * R[6].y; /* stockham.py:556 */
    R[6] = t; /* stockham.py:557 */

    InvRad7B1(&R[0], &R[1], &R[2], &R[3], &R[4], &R[5], &R[6]); /* stockham.py:566 */

    __syncthreads();
    if(write && thread < 24)
    {
        lds[offset_lds + ((thread / 8) * 56 + thread % 8 + 0) * lstride]
            = R[0]; /* stockham.py:577 */
        lds[offset_lds + ((thread / 8) * 56 + thread % 8 + 8) * lstride]
            = R[1]; /* stockham.py:577 */
        lds[offset_lds + ((thread / 8) * 56 + thread % 8 + 16) * lstride]
            = R[2]; /* stockham.py:577 */
        lds[offset_lds + ((thread / 8) * 56 + thread % 8 + 24) * lstride]
            = R[3]; /* stockham.py:577 */
        lds[offset_lds + ((thread / 8) * 56 + thread % 8 + 32) * lstride]
            = R[4]; /* stockham.py:577 */
        lds[offset_lds + ((thread / 8) * 56 + thread % 8 + 40) * lstride]
            = R[5]; /* stockham.py:577 */
        lds[offset_lds + ((thread / 8) * 56 + thread % 8 + 48) * lstride]
            = R[6]; /* stockham.py:577 */
    }

    // pass 2
    __syncthreads();
    R[0] = lds[offset_lds + (thread + 0) * lstride]; /* stockham.py:542 */
    R[1] = lds[offset_lds + (thread + 56) * lstride]; /* stockham.py:542 */
    R[2] = lds[offset_lds + (thread + 112) * lstride]; /* stockham.py:542 */

    W    = {twiddles[55 + 2 * (thread % 56)].x,
         -twiddles[55 + 2 * (thread % 56)].y}; /* generator.py:1065 */
    t.x  = W.x * R[1].x - W.y * R[1].y; /* stockham.py:555 */
    t.y  = W.y * R[1].x + W.x * R[1].y; /* stockham.py:556 */
    R[1] = t; /* stockham.py:557 */
    W    = {twiddles[56 + 2 * (thread % 56)].x,
         -twiddles[56 + 2 * (thread % 56)].y}; /* generator.py:1065 */
    t.x  = W.x * R[2].x - W.y * R[2].y; /* stockham.py:555 */
    t.y  = W.y * R[2].x + W.x * R[2].y; /* stockham.py:556 */
    R[2] = t; /* stockham.py:557 */

    InvRad3B1(&R[0], &R[1], &R[2]); /* stockham.py:566 */

    __syncthreads();
    if(write)
    {
        lds[offset_lds + ((thread / 56) * 168 + thread % 56 + 0) * lstride]
            = R[0]; /* stockham.py:577 */
        lds[offset_lds + ((thread / 56) * 168 + thread % 56 + 56) * lstride]
            = R[1]; /* stockham.py:577 */
        lds[offset_lds + ((thread / 56) * 168 + thread % 56 + 112) * lstride]
            = R[2]; /* stockham.py:577 */
    }
}
/* stockham.py:709 */
template <typename scalar_type, StrideBin sb, EmbeddedType ebtype, CallbackType cbtype>
__global__
    __launch_bounds__(224) void op_inverse_length168_SBRR(const scalar_type* __restrict__ twiddles,
                                                          const size_t dim,
                                                          const size_t* __restrict__ lengths,
                                                          const size_t* __restrict__ stride_in,
                                                          const size_t* __restrict__ stride_out,
                                                          const size_t       nbatch,
                                                          const unsigned int lds_padding,
                                                          void* __restrict__ load_cb_fn,
                                                          void* __restrict__ load_cb_data,
                                                          uint32_t load_cb_lds_bytes,
                                                          void* __restrict__ store_cb_fn,
                                                          void* __restrict__ store_cb_data,
                                                          scalar_type* __restrict__ buf_in,
                                                          scalar_type* __restrict__ buf_out)
{
    // this kernel:
    //   uses 56 threads per transform
    //   does 4 transforms per thread block
    // therefore it should be called with 224 threads per thread block
    extern __shared__ unsigned char __align__(sizeof(scalar_type)) lds_uchar[];
    scalar_type* __restrict__ lds = reinterpret_cast<scalar_type*>(lds_uchar);
    size_t       offset_in        = 0;
    size_t       offset_out       = 0;
    unsigned int offset_lds;
    size_t       stride_lds;
    size_t       batch;
    size_t       transform;
    size_t       thread;
    bool         write;
    const size_t stride0_in  = (sb == SB_UNIT) ? (1) : (stride_in[0]);
    const size_t stride0_out = (sb == SB_UNIT) ? (1) : (stride_out[0]);
    auto         load_cb     = get_load_cb<scalar_type, cbtype>(load_cb_fn);
    auto         store_cb    = get_store_cb<scalar_type, cbtype>(store_cb_fn);

    // large twiddles

    // offsets
    size_t remaining;
    size_t plength = 1;
    size_t index_along_d;
    transform = blockIdx.x * 4 + threadIdx.x / 56; /* stockham.py:363 */
    remaining = transform; /* stockham.py:364 */
    for(int d = 1; d < dim; ++d)
    {
        plength       = plength * lengths[d]; /* stockham.py:367 */
        index_along_d = remaining % lengths[d]; /* stockham.py:368 */
        remaining     = remaining / lengths[d]; /* stockham.py:369 */
        offset_in     = offset_in + index_along_d * stride_in[d]; /* generator.py:992 */
        offset_out    = offset_out + index_along_d * stride_out[d]; /* generator.py:993 */
    }
    batch      = transform / plength; /* stockham.py:371 */
    offset_in  = offset_in + batch * stride_in[dim]; /* generator.py:992 */
    offset_out = offset_out + batch * stride_out[dim]; /* generator.py:993 */
    offset_lds = (168 + lds_padding) * (transform % 4); /* stockham.py:373 */

    if(batch >= nbatch)
    {
        return;
    }

    // load global
    thread = threadIdx.x % 56; /* stockham.py:384 */
    lds[offset_lds + thread + 0]
        = load_cb(buf_in, offset_in + (thread + 0) * stride0_in, load_cb_data, nullptr);
    ; /* stockham.py:387 */
    lds[offset_lds + thread + 56]
        = load_cb(buf_in, offset_in + (thread + 56) * stride0_in, load_cb_data, nullptr);
    ; /* stockham.py:387 */
    lds[offset_lds + thread + 112]
        = load_cb(buf_in, offset_in + (thread + 112) * stride0_in, load_cb_data, nullptr);
    ; /* stockham.py:387 */

    // append extra global loading for C2Real pre-process only
    if(ebtype == EmbeddedType::C2Real_PRE)
    {
        // use the last thread of each transform to load one more element per row
        if(thread == 55)
        {
            lds[offset_lds + thread + 112 + 1] = load_cb(
                buf_in, offset_in + (thread + 112 + 1) * stride0_in, load_cb_data, nullptr);
            ; /* stockham.py:395 */
        }
    }

    // handle even-length real to complex pre-process in lds before transform
    if(ebtype == EmbeddedType::C2Real_PRE)
    {
        __syncthreads();

        real_pre_process_kernel_inplace<scalar_type, true>(thread % 84 + 0,
                                                           168 - thread % 84 - 0,
                                                           84,
                                                           &lds[offset_lds],
                                                           0,
                                                           &twiddles[168]); /* stockham.py:338 */

        real_pre_process_kernel_inplace<scalar_type, true>(thread % 84 + 56,
                                                           168 - thread % 84 - 56,
                                                           84,
                                                           &lds[offset_lds],
                                                           0,
                                                           &twiddles[168]); /* stockham.py:338 */

        __syncthreads();
    }

    // transform
    write = true; /* stockham.py:681 */
    op_inverse_length168_SBRR_device<scalar_type, SB_UNIT>(
        lds, twiddles, stride_lds, offset_lds, write); /* stockham.py:686 */

    // handle even-length complex to real post-process in lds after transform
    if(ebtype == EmbeddedType::Real2C_POST)
    {
        __syncthreads();

        real_post_process_kernel_inplace<scalar_type, true>(thread % 84 + 0,
                                                            168 - thread % 84 - 0,
                                                            84,
                                                            &lds[offset_lds],
                                                            0,
                                                            &twiddles[168]); /* stockham.py:338 */

        real_post_process_kernel_inplace<scalar_type, true>(thread % 84 + 56,
                                                            168 - thread % 84 - 56,
                                                            84,
                                                            &lds[offset_lds],
                                                            0,
                                                            &twiddles[168]); /* stockham.py:338 */
    }

    // store global
    __syncthreads();
    store_cb(buf_out,
             offset_out + (thread + 0) * stride0_out,
             lds[offset_lds + thread + 0],
             store_cb_data,
             nullptr);
    store_cb(buf_out,
             offset_out + (thread + 56) * stride0_out,
             lds[offset_lds + thread + 56],
             store_cb_data,
             nullptr);
    store_cb(buf_out,
             offset_out + (thread + 112) * stride0_out,
             lds[offset_lds + thread + 112],
             store_cb_data,
             nullptr);

    // append extra global write for Real2C post-process only
    if(ebtype == EmbeddedType::Real2C_POST)
    {
        // use the last thread of each transform to write one more element per row
        if(thread == 55)
        {
            store_cb(buf_out,
                     offset_out + (thread + 112 + 1) * stride0_out,
                     lds[offset_lds + thread + 112 + 1],
                     store_cb_data,
                     nullptr);
        }
    }
}
/* stockham.py:709 */
template <typename scalar_type, StrideBin sb, EmbeddedType ebtype, CallbackType cbtype>
__global__ __launch_bounds__(224) void op_inverse_length168_SBRR(
    const scalar_type* __restrict__ twiddles,
    const size_t dim,
    const size_t* __restrict__ lengths,
    const size_t* __restrict__ stride_in,
    const size_t* __restrict__ stride_out,
    const size_t       nbatch,
    const unsigned int lds_padding,
    void* __restrict__ load_cb_fn,
    void* __restrict__ load_cb_data,
    uint32_t load_cb_lds_bytes,
    void* __restrict__ store_cb_fn,
    void* __restrict__ store_cb_data,
    scalar_type* __restrict__ buf_in,
    real_type_t<scalar_type>* __restrict__ buf_outre,
    real_type_t<scalar_type>* __restrict__ buf_outim)
{
    // this kernel:
    //   uses 56 threads per transform
    //   does 4 transforms per thread block
    // therefore it should be called with 224 threads per thread block
    extern __shared__ unsigned char __align__(sizeof(scalar_type)) lds_uchar[];
    scalar_type* __restrict__ lds = reinterpret_cast<scalar_type*>(lds_uchar);
    size_t       offset_in        = 0;
    size_t       offset_out       = 0;
    unsigned int offset_lds;
    size_t       stride_lds;
    size_t       batch;
    size_t       transform;
    size_t       thread;
    bool         write;
    const size_t stride0_in  = (sb == SB_UNIT) ? (1) : (stride_in[0]);
    const size_t stride0_out = (sb == SB_UNIT) ? (1) : (stride_out[0]);
    auto         load_cb     = get_load_cb<scalar_type, cbtype>(load_cb_fn);
    auto         store_cb    = get_store_cb<scalar_type, cbtype>(store_cb_fn);

    // large twiddles

    // offsets
    size_t remaining;
    size_t plength = 1;
    size_t index_along_d;
    transform = blockIdx.x * 4 + threadIdx.x / 56; /* stockham.py:363 */
    remaining = transform; /* stockham.py:364 */
    for(int d = 1; d < dim; ++d)
    {
        plength       = plength * lengths[d]; /* stockham.py:367 */
        index_along_d = remaining % lengths[d]; /* stockham.py:368 */
        remaining     = remaining / lengths[d]; /* stockham.py:369 */
        offset_in     = offset_in + index_along_d * stride_in[d]; /* generator.py:992 */
        offset_out    = offset_out + index_along_d * stride_out[d]; /* generator.py:993 */
    }
    batch      = transform / plength; /* stockham.py:371 */
    offset_in  = offset_in + batch * stride_in[dim]; /* generator.py:992 */
    offset_out = offset_out + batch * stride_out[dim]; /* generator.py:993 */
    offset_lds = (168 + lds_padding) * (transform % 4); /* stockham.py:373 */

    if(batch >= nbatch)
    {
        return;
    }

    // load global
    thread = threadIdx.x % 56; /* stockham.py:384 */
    lds[offset_lds + thread + 0]
        = load_cb(buf_in, offset_in + (thread + 0) * stride0_in, load_cb_data, nullptr);
    ; /* stockham.py:387 */
    lds[offset_lds + thread + 56]
        = load_cb(buf_in, offset_in + (thread + 56) * stride0_in, load_cb_data, nullptr);
    ; /* stockham.py:387 */
    lds[offset_lds + thread + 112]
        = load_cb(buf_in, offset_in + (thread + 112) * stride0_in, load_cb_data, nullptr);
    ; /* stockham.py:387 */

    // append extra global loading for C2Real pre-process only
    if(ebtype == EmbeddedType::C2Real_PRE)
    {
        // use the last thread of each transform to load one more element per row
        if(thread == 55)
        {
            lds[offset_lds + thread + 112 + 1] = load_cb(
                buf_in, offset_in + (thread + 112 + 1) * stride0_in, load_cb_data, nullptr);
            ; /* stockham.py:395 */
        }
    }

    // handle even-length real to complex pre-process in lds before transform
    if(ebtype == EmbeddedType::C2Real_PRE)
    {
        __syncthreads();

        real_pre_process_kernel_inplace<scalar_type, true>(thread % 84 + 0,
                                                           168 - thread % 84 - 0,
                                                           84,
                                                           &lds[offset_lds],
                                                           0,
                                                           &twiddles[168]); /* stockham.py:338 */

        real_pre_process_kernel_inplace<scalar_type, true>(thread % 84 + 56,
                                                           168 - thread % 84 - 56,
                                                           84,
                                                           &lds[offset_lds],
                                                           0,
                                                           &twiddles[168]); /* stockham.py:338 */

        __syncthreads();
    }

    // transform
    write = true; /* stockham.py:681 */
    op_inverse_length168_SBRR_device<scalar_type, SB_UNIT>(
        lds, twiddles, stride_lds, offset_lds, write); /* stockham.py:686 */

    // handle even-length complex to real post-process in lds after transform
    if(ebtype == EmbeddedType::Real2C_POST)
    {
        __syncthreads();

        real_post_process_kernel_inplace<scalar_type, true>(thread % 84 + 0,
                                                            168 - thread % 84 - 0,
                                                            84,
                                                            &lds[offset_lds],
                                                            0,
                                                            &twiddles[168]); /* stockham.py:338 */

        real_post_process_kernel_inplace<scalar_type, true>(thread % 84 + 56,
                                                            168 - thread % 84 - 56,
                                                            84,
                                                            &lds[offset_lds],
                                                            0,
                                                            &twiddles[168]); /* stockham.py:338 */
    }

    // store global
    __syncthreads();
    buf_outre[offset_out + (thread + 0) * stride0_out]
        = lds[offset_lds + thread + 0].x; /* generator.py:906 */
    buf_outim[offset_out + (thread + 0) * stride0_out]
        = lds[offset_lds + thread + 0].y; /* generator.py:908 */
    buf_outre[offset_out + (thread + 56) * stride0_out]
        = lds[offset_lds + thread + 56].x; /* generator.py:906 */
    buf_outim[offset_out + (thread + 56) * stride0_out]
        = lds[offset_lds + thread + 56].y; /* generator.py:908 */
    buf_outre[offset_out + (thread + 112) * stride0_out]
        = lds[offset_lds + thread + 112].x; /* generator.py:906 */
    buf_outim[offset_out + (thread + 112) * stride0_out]
        = lds[offset_lds + thread + 112].y; /* generator.py:908 */

    // append extra global write for Real2C post-process only
    if(ebtype == EmbeddedType::Real2C_POST)
    {
        // use the last thread of each transform to write one more element per row
        if(thread == 55)
        {
            buf_outre[offset_out + (thread + 112 + 1) * stride0_out]
                = lds[offset_lds + thread + 112 + 1].x; /* generator.py:906 */
            buf_outim[offset_out + (thread + 112 + 1) * stride0_out]
                = lds[offset_lds + thread + 112 + 1].y; /* generator.py:908 */
        }
    }
}
/* stockham.py:709 */
template <typename scalar_type, StrideBin sb, EmbeddedType ebtype, CallbackType cbtype>
__global__ __launch_bounds__(224) void op_inverse_length168_SBRR(
    const scalar_type* __restrict__ twiddles,
    const size_t dim,
    const size_t* __restrict__ lengths,
    const size_t* __restrict__ stride_in,
    const size_t* __restrict__ stride_out,
    const size_t       nbatch,
    const unsigned int lds_padding,
    void* __restrict__ load_cb_fn,
    void* __restrict__ load_cb_data,
    uint32_t load_cb_lds_bytes,
    void* __restrict__ store_cb_fn,
    void* __restrict__ store_cb_data,
    real_type_t<scalar_type>* __restrict__ buf_inre,
    real_type_t<scalar_type>* __restrict__ buf_inim,
    scalar_type* __restrict__ buf_out)
{
    // this kernel:
    //   uses 56 threads per transform
    //   does 4 transforms per thread block
    // therefore it should be called with 224 threads per thread block
    extern __shared__ unsigned char __align__(sizeof(scalar_type)) lds_uchar[];
    scalar_type* __restrict__ lds = reinterpret_cast<scalar_type*>(lds_uchar);
    size_t       offset_in        = 0;
    size_t       offset_out       = 0;
    unsigned int offset_lds;
    size_t       stride_lds;
    size_t       batch;
    size_t       transform;
    size_t       thread;
    bool         write;
    const size_t stride0_in  = (sb == SB_UNIT) ? (1) : (stride_in[0]);
    const size_t stride0_out = (sb == SB_UNIT) ? (1) : (stride_out[0]);
    auto         load_cb     = get_load_cb<scalar_type, cbtype>(load_cb_fn);
    auto         store_cb    = get_store_cb<scalar_type, cbtype>(store_cb_fn);

    // large twiddles

    // offsets
    size_t remaining;
    size_t plength = 1;
    size_t index_along_d;
    transform = blockIdx.x * 4 + threadIdx.x / 56; /* stockham.py:363 */
    remaining = transform; /* stockham.py:364 */
    for(int d = 1; d < dim; ++d)
    {
        plength       = plength * lengths[d]; /* stockham.py:367 */
        index_along_d = remaining % lengths[d]; /* stockham.py:368 */
        remaining     = remaining / lengths[d]; /* stockham.py:369 */
        offset_in     = offset_in + index_along_d * stride_in[d]; /* generator.py:992 */
        offset_out    = offset_out + index_along_d * stride_out[d]; /* generator.py:993 */
    }
    batch      = transform / plength; /* stockham.py:371 */
    offset_in  = offset_in + batch * stride_in[dim]; /* generator.py:992 */
    offset_out = offset_out + batch * stride_out[dim]; /* generator.py:993 */
    offset_lds = (168 + lds_padding) * (transform % 4); /* stockham.py:373 */

    if(batch >= nbatch)
    {
        return;
    }

    // load global
    thread = threadIdx.x % 56; /* stockham.py:384 */
    lds[offset_lds + thread + 0]
        = {buf_inre[offset_in + (thread + 0) * stride0_in],
           buf_inim[offset_in + (thread + 0) * stride0_in]}; /* generator.py:872 */
    lds[offset_lds + thread + 56]
        = {buf_inre[offset_in + (thread + 56) * stride0_in],
           buf_inim[offset_in + (thread + 56) * stride0_in]}; /* generator.py:872 */
    lds[offset_lds + thread + 112]
        = {buf_inre[offset_in + (thread + 112) * stride0_in],
           buf_inim[offset_in + (thread + 112) * stride0_in]}; /* generator.py:872 */

    // append extra global loading for C2Real pre-process only
    if(ebtype == EmbeddedType::C2Real_PRE)
    {
        // use the last thread of each transform to load one more element per row
        if(thread == 55)
        {
            lds[offset_lds + thread + 112 + 1]
                = {buf_inre[offset_in + (thread + 112 + 1) * stride0_in],
                   buf_inim[offset_in + (thread + 112 + 1) * stride0_in]}; /* generator.py:872 */
        }
    }

    // handle even-length real to complex pre-process in lds before transform
    if(ebtype == EmbeddedType::C2Real_PRE)
    {
        __syncthreads();

        real_pre_process_kernel_inplace<scalar_type, true>(thread % 84 + 0,
                                                           168 - thread % 84 - 0,
                                                           84,
                                                           &lds[offset_lds],
                                                           0,
                                                           &twiddles[168]); /* stockham.py:338 */

        real_pre_process_kernel_inplace<scalar_type, true>(thread % 84 + 56,
                                                           168 - thread % 84 - 56,
                                                           84,
                                                           &lds[offset_lds],
                                                           0,
                                                           &twiddles[168]); /* stockham.py:338 */

        __syncthreads();
    }

    // transform
    write = true; /* stockham.py:681 */
    op_inverse_length168_SBRR_device<scalar_type, SB_UNIT>(
        lds, twiddles, stride_lds, offset_lds, write); /* stockham.py:686 */

    // handle even-length complex to real post-process in lds after transform
    if(ebtype == EmbeddedType::Real2C_POST)
    {
        __syncthreads();

        real_post_process_kernel_inplace<scalar_type, true>(thread % 84 + 0,
                                                            168 - thread % 84 - 0,
                                                            84,
                                                            &lds[offset_lds],
                                                            0,
                                                            &twiddles[168]); /* stockham.py:338 */

        real_post_process_kernel_inplace<scalar_type, true>(thread % 84 + 56,
                                                            168 - thread % 84 - 56,
                                                            84,
                                                            &lds[offset_lds],
                                                            0,
                                                            &twiddles[168]); /* stockham.py:338 */
    }

    // store global
    __syncthreads();
    store_cb(buf_out,
             offset_out + (thread + 0) * stride0_out,
             lds[offset_lds + thread + 0],
             store_cb_data,
             nullptr);
    store_cb(buf_out,
             offset_out + (thread + 56) * stride0_out,
             lds[offset_lds + thread + 56],
             store_cb_data,
             nullptr);
    store_cb(buf_out,
             offset_out + (thread + 112) * stride0_out,
             lds[offset_lds + thread + 112],
             store_cb_data,
             nullptr);

    // append extra global write for Real2C post-process only
    if(ebtype == EmbeddedType::Real2C_POST)
    {
        // use the last thread of each transform to write one more element per row
        if(thread == 55)
        {
            store_cb(buf_out,
                     offset_out + (thread + 112 + 1) * stride0_out,
                     lds[offset_lds + thread + 112 + 1],
                     store_cb_data,
                     nullptr);
        }
    }
}
/* stockham.py:709 */
template <typename scalar_type, StrideBin sb, EmbeddedType ebtype, CallbackType cbtype>
__global__ __launch_bounds__(224) void op_inverse_length168_SBRR(
    const scalar_type* __restrict__ twiddles,
    const size_t dim,
    const size_t* __restrict__ lengths,
    const size_t* __restrict__ stride_in,
    const size_t* __restrict__ stride_out,
    const size_t       nbatch,
    const unsigned int lds_padding,
    void* __restrict__ load_cb_fn,
    void* __restrict__ load_cb_data,
    uint32_t load_cb_lds_bytes,
    void* __restrict__ store_cb_fn,
    void* __restrict__ store_cb_data,
    real_type_t<scalar_type>* __restrict__ buf_inre,
    real_type_t<scalar_type>* __restrict__ buf_inim,
    real_type_t<scalar_type>* __restrict__ buf_outre,
    real_type_t<scalar_type>* __restrict__ buf_outim)
{
    // this kernel:
    //   uses 56 threads per transform
    //   does 4 transforms per thread block
    // therefore it should be called with 224 threads per thread block
    extern __shared__ unsigned char __align__(sizeof(scalar_type)) lds_uchar[];
    scalar_type* __restrict__ lds = reinterpret_cast<scalar_type*>(lds_uchar);
    size_t       offset_in        = 0;
    size_t       offset_out       = 0;
    unsigned int offset_lds;
    size_t       stride_lds;
    size_t       batch;
    size_t       transform;
    size_t       thread;
    bool         write;
    const size_t stride0_in  = (sb == SB_UNIT) ? (1) : (stride_in[0]);
    const size_t stride0_out = (sb == SB_UNIT) ? (1) : (stride_out[0]);
    auto         load_cb     = get_load_cb<scalar_type, cbtype>(load_cb_fn);
    auto         store_cb    = get_store_cb<scalar_type, cbtype>(store_cb_fn);

    // large twiddles

    // offsets
    size_t remaining;
    size_t plength = 1;
    size_t index_along_d;
    transform = blockIdx.x * 4 + threadIdx.x / 56; /* stockham.py:363 */
    remaining = transform; /* stockham.py:364 */
    for(int d = 1; d < dim; ++d)
    {
        plength       = plength * lengths[d]; /* stockham.py:367 */
        index_along_d = remaining % lengths[d]; /* stockham.py:368 */
        remaining     = remaining / lengths[d]; /* stockham.py:369 */
        offset_in     = offset_in + index_along_d * stride_in[d]; /* generator.py:992 */
        offset_out    = offset_out + index_along_d * stride_out[d]; /* generator.py:993 */
    }
    batch      = transform / plength; /* stockham.py:371 */
    offset_in  = offset_in + batch * stride_in[dim]; /* generator.py:992 */
    offset_out = offset_out + batch * stride_out[dim]; /* generator.py:993 */
    offset_lds = (168 + lds_padding) * (transform % 4); /* stockham.py:373 */

    if(batch >= nbatch)
    {
        return;
    }

    // load global
    thread = threadIdx.x % 56; /* stockham.py:384 */
    lds[offset_lds + thread + 0]
        = {buf_inre[offset_in + (thread + 0) * stride0_in],
           buf_inim[offset_in + (thread + 0) * stride0_in]}; /* generator.py:872 */
    lds[offset_lds + thread + 56]
        = {buf_inre[offset_in + (thread + 56) * stride0_in],
           buf_inim[offset_in + (thread + 56) * stride0_in]}; /* generator.py:872 */
    lds[offset_lds + thread + 112]
        = {buf_inre[offset_in + (thread + 112) * stride0_in],
           buf_inim[offset_in + (thread + 112) * stride0_in]}; /* generator.py:872 */

    // append extra global loading for C2Real pre-process only
    if(ebtype == EmbeddedType::C2Real_PRE)
    {
        // use the last thread of each transform to load one more element per row
        if(thread == 55)
        {
            lds[offset_lds + thread + 112 + 1]
                = {buf_inre[offset_in + (thread + 112 + 1) * stride0_in],
                   buf_inim[offset_in + (thread + 112 + 1) * stride0_in]}; /* generator.py:872 */
        }
    }

    // handle even-length real to complex pre-process in lds before transform
    if(ebtype == EmbeddedType::C2Real_PRE)
    {
        __syncthreads();

        real_pre_process_kernel_inplace<scalar_type, true>(thread % 84 + 0,
                                                           168 - thread % 84 - 0,
                                                           84,
                                                           &lds[offset_lds],
                                                           0,
                                                           &twiddles[168]); /* stockham.py:338 */

        real_pre_process_kernel_inplace<scalar_type, true>(thread % 84 + 56,
                                                           168 - thread % 84 - 56,
                                                           84,
                                                           &lds[offset_lds],
                                                           0,
                                                           &twiddles[168]); /* stockham.py:338 */

        __syncthreads();
    }

    // transform
    write = true; /* stockham.py:681 */
    op_inverse_length168_SBRR_device<scalar_type, SB_UNIT>(
        lds, twiddles, stride_lds, offset_lds, write); /* stockham.py:686 */

    // handle even-length complex to real post-process in lds after transform
    if(ebtype == EmbeddedType::Real2C_POST)
    {
        __syncthreads();

        real_post_process_kernel_inplace<scalar_type, true>(thread % 84 + 0,
                                                            168 - thread % 84 - 0,
                                                            84,
                                                            &lds[offset_lds],
                                                            0,
                                                            &twiddles[168]); /* stockham.py:338 */

        real_post_process_kernel_inplace<scalar_type, true>(thread % 84 + 56,
                                                            168 - thread % 84 - 56,
                                                            84,
                                                            &lds[offset_lds],
                                                            0,
                                                            &twiddles[168]); /* stockham.py:338 */
    }

    // store global
    __syncthreads();
    buf_outre[offset_out + (thread + 0) * stride0_out]
        = lds[offset_lds + thread + 0].x; /* generator.py:906 */
    buf_outim[offset_out + (thread + 0) * stride0_out]
        = lds[offset_lds + thread + 0].y; /* generator.py:908 */
    buf_outre[offset_out + (thread + 56) * stride0_out]
        = lds[offset_lds + thread + 56].x; /* generator.py:906 */
    buf_outim[offset_out + (thread + 56) * stride0_out]
        = lds[offset_lds + thread + 56].y; /* generator.py:908 */
    buf_outre[offset_out + (thread + 112) * stride0_out]
        = lds[offset_lds + thread + 112].x; /* generator.py:906 */
    buf_outim[offset_out + (thread + 112) * stride0_out]
        = lds[offset_lds + thread + 112].y; /* generator.py:908 */

    // append extra global write for Real2C post-process only
    if(ebtype == EmbeddedType::Real2C_POST)
    {
        // use the last thread of each transform to write one more element per row
        if(thread == 55)
        {
            buf_outre[offset_out + (thread + 112 + 1) * stride0_out]
                = lds[offset_lds + thread + 112 + 1].x; /* generator.py:906 */
            buf_outim[offset_out + (thread + 112 + 1) * stride0_out]
                = lds[offset_lds + thread + 112 + 1].y; /* generator.py:908 */
        }
    }
}
POWX_SMALL_GENERATOR(rocfft_internal_dfn_dp_ci_ci_stoc_168,
                     ip_forward_length168_SBRR,
                     ip_inverse_length168_SBRR,
                     op_forward_length168_SBRR,
                     op_inverse_length168_SBRR,
                     double2);
POWX_SMALL_GENERATOR(rocfft_internal_dfn_sp_ci_ci_stoc_168,
                     ip_forward_length168_SBRR,
                     ip_inverse_length168_SBRR,
                     op_forward_length168_SBRR,
                     op_inverse_length168_SBRR,
                     float2);